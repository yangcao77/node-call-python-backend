import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LifecycleService } from '@backstage/backend-plugin-api';
import { HumanDuration } from '@backstage/types';
import { RequestHandler } from 'express';

/**
 * HTTP route registration for plugins.
 *
 * See {@link @backstage/code-plugin-api#HttpRouterService}
 * and {@link https://backstage.io/docs/backend-system/core-services/http-router | the service docs}
 * for more information.
 *
 * @public
 */
declare const httpRouterServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.HttpRouterService, "plugin", "singleton", undefined>;

/**
 * Options for {@link createLifecycleMiddleware}.
 * @public
 */
interface LifecycleMiddlewareOptions {
    lifecycle: LifecycleService;
    /**
     * The maximum time that paused requests will wait for the service to start, before returning an error.
     *
     * Defaults to 5 seconds.
     */
    startupRequestPauseTimeout?: HumanDuration;
}
/**
 * Creates a middleware that pauses requests until the service has started.
 *
 * @remarks
 *
 * Requests that arrive before the service has started will be paused until startup is complete.
 * If the service does not start within the provided timeout, the request will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * If the service is shutting down, all requests will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * @public
 */
declare function createLifecycleMiddleware(options: LifecycleMiddlewareOptions): RequestHandler;

export { type LifecycleMiddlewareOptions, createLifecycleMiddleware, httpRouterServiceFactory };
