{"version":3,"file":"rootLogger.cjs.js","sources":["../src/lib/escapeRegExp.ts","../src/entrypoints/rootLogger/WinstonLogger.ts","../src/entrypoints/rootLogger/rootLoggerServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nexport const escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format, TransformableInfo } from 'logform';\nimport {\n  Logger,\n  format,\n  createLogger,\n  transports,\n  transport as Transport,\n} from 'winston';\nimport { MESSAGE } from 'triple-beam';\nimport { escapeRegExp } from '../../lib/escapeRegExp';\n\n/**\n * @public\n */\nexport interface WinstonLoggerOptions {\n  meta?: JsonObject;\n  level?: string;\n  format?: Format;\n  transports?: Transport[];\n}\n\n/**\n * A {@link @backstage/backend-plugin-api#LoggerService} implementation based on winston.\n *\n * @public\n */\nexport class WinstonLogger implements RootLoggerService {\n  #winston: Logger;\n  #addRedactions?: (redactions: Iterable<string>) => void;\n\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    const redacter = WinstonLogger.redacter();\n    const defaultFormatter =\n      process.env.NODE_ENV === 'production'\n        ? format.json()\n        : WinstonLogger.colorFormat();\n\n    let logger = createLogger({\n      level: process.env.LOG_LEVEL || options.level || 'info',\n      format: format.combine(\n        options.format ?? defaultFormatter,\n        redacter.format,\n      ),\n      transports: options.transports ?? new transports.Console(),\n    });\n\n    if (options.meta) {\n      logger = logger.child(options.meta);\n    }\n\n    return new WinstonLogger(logger, redacter.add);\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    const redactionSet = new Set<string>();\n\n    let redactionPattern: RegExp | undefined = undefined;\n\n    return {\n      format: format((obj: TransformableInfo) => {\n        if (!redactionPattern || !obj) {\n          return obj;\n        }\n\n        obj[MESSAGE] = obj[MESSAGE]?.replace?.(redactionPattern, '***');\n\n        return obj;\n      })(),\n      add(newRedactions) {\n        let added = 0;\n        for (const redactionToTrim of newRedactions) {\n          // Trimming the string ensures that we don't accdentally get extra\n          // newlines or other whitespace interfering with the redaction; this\n          // can happen for example when using string literals in yaml\n          const redaction = redactionToTrim.trim();\n          // Exclude secrets that are empty or just one character in length. These\n          // typically mean that you are running local dev or tests, or using the\n          // --lax flag which sets things to just 'x'.\n          if (redaction.length <= 1) {\n            continue;\n          }\n          if (!redactionSet.has(redaction)) {\n            redactionSet.add(redaction);\n            added += 1;\n          }\n        }\n        if (added > 0) {\n          const redactions = Array.from(redactionSet)\n            .map(r => escapeRegExp(r))\n            .join('|');\n          redactionPattern = new RegExp(`(${redactions})`, 'g');\n        }\n      },\n    };\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    const colorizer = format.colorize();\n\n    return format.combine(\n      format.timestamp(),\n      format.colorize({\n        colors: {\n          timestamp: 'dim',\n          prefix: 'blue',\n          field: 'cyan',\n          debug: 'grey',\n        },\n      }),\n      format.printf((info: TransformableInfo) => {\n        const { timestamp, level, message, plugin, service, ...fields } = info;\n        const prefix = plugin || service;\n        const timestampColor = colorizer.colorize('timestamp', timestamp);\n        const prefixColor = colorizer.colorize('prefix', prefix);\n\n        const extraFields = Object.entries(fields)\n          .map(\n            ([key, value]) =>\n              `${colorizer.colorize('field', `${key}`)}=${value}`,\n          )\n          .join(' ');\n\n        return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n      }),\n    );\n  }\n\n  private constructor(\n    winston: Logger,\n    addRedactions?: (redactions: Iterable<string>) => void,\n  ) {\n    this.#winston = winston;\n    this.#addRedactions = addRedactions;\n  }\n\n  error(message: string, meta?: JsonObject): void {\n    this.#winston.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.#winston.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.#winston.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.#winston.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new WinstonLogger(this.#winston.child(meta));\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.#addRedactions?.(redactions);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createServiceFactory,\n  coreServices,\n} from '@backstage/backend-plugin-api';\nimport { transports, format } from 'winston';\nimport { WinstonLogger } from '../rootLogger/WinstonLogger';\nimport { createConfigSecretEnumerator } from '../rootConfig/createConfigSecretEnumerator';\n\n/**\n * Root-level logging.\n *\n * See {@link @backstage/code-plugin-api#RootLoggerService}\n * and {@link https://backstage.io/docs/backend-system/core-services/root-logger | the service docs}\n * for more information.\n *\n * @public\n */\nexport const rootLoggerServiceFactory = createServiceFactory({\n  service: coreServices.rootLogger,\n  deps: {\n    config: coreServices.rootConfig,\n  },\n  async factory({ config }) {\n    const logger = WinstonLogger.create({\n      meta: {\n        service: 'backstage',\n      },\n      level: process.env.LOG_LEVEL || 'info',\n      format:\n        process.env.NODE_ENV === 'production'\n          ? format.json()\n          : WinstonLogger.colorFormat(),\n      transports: [new transports.Console()],\n    });\n\n    const secretEnumerator = await createConfigSecretEnumerator({ logger });\n    logger.addRedactions(secretEnumerator(config));\n    config.subscribe?.(() => logger.addRedactions(secretEnumerator(config)));\n\n    return logger;\n  },\n});\n"],"names":["format","createLogger","transports","MESSAGE","createServiceFactory","coreServices","createConfigSecretEnumerator"],"mappings":";;;;;;;;;AAqBa,MAAA,YAAA,GAAe,CAAC,IAAiB,KAAA;AAC5C,EAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,sBAAA,EAAwB,MAAM,CAAA,CAAA;AACpD,CAAA;;ACwBO,MAAM,aAA2C,CAAA;AAAA,EACtD,QAAA,CAAA;AAAA,EACA,cAAA,CAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,OAA8C,EAAA;AAC1D,IAAM,MAAA,QAAA,GAAW,cAAc,QAAS,EAAA,CAAA;AACxC,IAAM,MAAA,gBAAA,GACJ,QAAQ,GAAI,CAAA,QAAA,KAAa,eACrBA,cAAO,CAAA,IAAA,EACP,GAAA,aAAA,CAAc,WAAY,EAAA,CAAA;AAEhC,IAAA,IAAI,SAASC,oBAAa,CAAA;AAAA,MACxB,KAAO,EAAA,OAAA,CAAQ,GAAI,CAAA,SAAA,IAAa,QAAQ,KAAS,IAAA,MAAA;AAAA,MACjD,QAAQD,cAAO,CAAA,OAAA;AAAA,QACb,QAAQ,MAAU,IAAA,gBAAA;AAAA,QAClB,QAAS,CAAA,MAAA;AAAA,OACX;AAAA,MACA,UAAY,EAAA,OAAA,CAAQ,UAAc,IAAA,IAAIE,mBAAW,OAAQ,EAAA;AAAA,KAC1D,CAAA,CAAA;AAED,IAAA,IAAI,QAAQ,IAAM,EAAA;AAChB,MAAS,MAAA,GAAA,MAAA,CAAO,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAAA,KACpC;AAEA,IAAA,OAAO,IAAI,aAAA,CAAc,MAAQ,EAAA,QAAA,CAAS,GAAG,CAAA,CAAA;AAAA,GAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAGL,GAAA;AACA,IAAM,MAAA,YAAA,uBAAmB,GAAY,EAAA,CAAA;AAErC,IAAA,IAAI,gBAAuC,GAAA,KAAA,CAAA,CAAA;AAE3C,IAAO,OAAA;AAAA,MACL,MAAA,EAAQF,cAAO,CAAA,CAAC,GAA2B,KAAA;AACzC,QAAI,IAAA,CAAC,gBAAoB,IAAA,CAAC,GAAK,EAAA;AAC7B,UAAO,OAAA,GAAA,CAAA;AAAA,SACT;AAEA,QAAA,GAAA,CAAIG,kBAAO,CAAI,GAAA,GAAA,CAAIA,kBAAO,CAAG,EAAA,OAAA,GAAU,kBAAkB,KAAK,CAAA,CAAA;AAE9D,QAAO,OAAA,GAAA,CAAA;AAAA,OACR,CAAE,EAAA;AAAA,MACH,IAAI,aAAe,EAAA;AACjB,QAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AACZ,QAAA,KAAA,MAAW,mBAAmB,aAAe,EAAA;AAI3C,UAAM,MAAA,SAAA,GAAY,gBAAgB,IAAK,EAAA,CAAA;AAIvC,UAAI,IAAA,SAAA,CAAU,UAAU,CAAG,EAAA;AACzB,YAAA,SAAA;AAAA,WACF;AACA,UAAA,IAAI,CAAC,YAAA,CAAa,GAAI,CAAA,SAAS,CAAG,EAAA;AAChC,YAAA,YAAA,CAAa,IAAI,SAAS,CAAA,CAAA;AAC1B,YAAS,KAAA,IAAA,CAAA,CAAA;AAAA,WACX;AAAA,SACF;AACA,QAAA,IAAI,QAAQ,CAAG,EAAA;AACb,UAAA,MAAM,UAAa,GAAA,KAAA,CAAM,IAAK,CAAA,YAAY,CACvC,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,YAAA,CAAa,CAAC,CAAC,CACxB,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AACX,UAAA,gBAAA,GAAmB,IAAI,MAAA,CAAO,CAAI,CAAA,EAAA,UAAU,KAAK,GAAG,CAAA,CAAA;AAAA,SACtD;AAAA,OACF;AAAA,KACF,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAsB,GAAA;AAC3B,IAAM,MAAA,SAAA,GAAYH,eAAO,QAAS,EAAA,CAAA;AAElC,IAAA,OAAOA,cAAO,CAAA,OAAA;AAAA,MACZA,eAAO,SAAU,EAAA;AAAA,MACjBA,eAAO,QAAS,CAAA;AAAA,QACd,MAAQ,EAAA;AAAA,UACN,SAAW,EAAA,KAAA;AAAA,UACX,MAAQ,EAAA,MAAA;AAAA,UACR,KAAO,EAAA,MAAA;AAAA,UACP,KAAO,EAAA,MAAA;AAAA,SACT;AAAA,OACD,CAAA;AAAA,MACDA,cAAA,CAAO,MAAO,CAAA,CAAC,IAA4B,KAAA;AACzC,QAAM,MAAA,EAAE,WAAW,KAAO,EAAA,OAAA,EAAS,QAAQ,OAAS,EAAA,GAAG,QAAW,GAAA,IAAA,CAAA;AAClE,QAAA,MAAM,SAAS,MAAU,IAAA,OAAA,CAAA;AACzB,QAAA,MAAM,cAAiB,GAAA,SAAA,CAAU,QAAS,CAAA,WAAA,EAAa,SAAS,CAAA,CAAA;AAChE,QAAA,MAAM,WAAc,GAAA,SAAA,CAAU,QAAS,CAAA,QAAA,EAAU,MAAM,CAAA,CAAA;AAEvD,QAAA,MAAM,WAAc,GAAA,MAAA,CAAO,OAAQ,CAAA,MAAM,CACtC,CAAA,GAAA;AAAA,UACC,CAAC,CAAC,GAAK,EAAA,KAAK,MACV,CAAG,EAAA,SAAA,CAAU,QAAS,CAAA,OAAA,EAAS,CAAG,EAAA,GAAG,CAAE,CAAA,CAAC,IAAI,KAAK,CAAA,CAAA;AAAA,SACrD,CACC,KAAK,GAAG,CAAA,CAAA;AAEX,QAAO,OAAA,CAAA,EAAG,cAAc,CAAI,CAAA,EAAA,WAAW,IAAI,KAAK,CAAA,CAAA,EAAI,OAAO,CAAA,CAAA,EAAI,WAAW,CAAA,CAAA,CAAA;AAAA,OAC3E,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAEQ,WAAA,CACN,SACA,aACA,EAAA;AACA,IAAA,IAAA,CAAK,QAAW,GAAA,OAAA,CAAA;AAChB,IAAA,IAAA,CAAK,cAAiB,GAAA,aAAA,CAAA;AAAA,GACxB;AAAA,EAEA,KAAA,CAAM,SAAiB,IAAyB,EAAA;AAC9C,IAAK,IAAA,CAAA,QAAA,CAAS,KAAM,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAAyB,EAAA;AAC7C,IAAK,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAAyB,EAAA;AAC7C,IAAK,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,KAAA,CAAM,SAAiB,IAAyB,EAAA;AAC9C,IAAK,IAAA,CAAA,QAAA,CAAS,KAAM,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,MAAM,IAAiC,EAAA;AACrC,IAAA,OAAO,IAAI,aAAc,CAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,IAAI,CAAC,CAAA,CAAA;AAAA,GACpD;AAAA,EAEA,cAAc,UAA8B,EAAA;AAC1C,IAAA,IAAA,CAAK,iBAAiB,UAAU,CAAA,CAAA;AAAA,GAClC;AACF;;AC9JO,MAAM,2BAA2BI,qCAAqB,CAAA;AAAA,EAC3D,SAASC,6BAAa,CAAA,UAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACJ,QAAQA,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,MAAM,OAAA,CAAQ,EAAE,MAAA,EAAU,EAAA;AACxB,IAAM,MAAA,MAAA,GAAS,cAAc,MAAO,CAAA;AAAA,MAClC,IAAM,EAAA;AAAA,QACJ,OAAS,EAAA,WAAA;AAAA,OACX;AAAA,MACA,KAAA,EAAO,OAAQ,CAAA,GAAA,CAAI,SAAa,IAAA,MAAA;AAAA,MAChC,MAAA,EACE,QAAQ,GAAI,CAAA,QAAA,KAAa,eACrBL,cAAO,CAAA,IAAA,EACP,GAAA,aAAA,CAAc,WAAY,EAAA;AAAA,MAChC,UAAY,EAAA,CAAC,IAAIE,kBAAA,CAAW,SAAS,CAAA;AAAA,KACtC,CAAA,CAAA;AAED,IAAA,MAAM,gBAAmB,GAAA,MAAMI,yDAA6B,CAAA,EAAE,QAAQ,CAAA,CAAA;AACtE,IAAO,MAAA,CAAA,aAAA,CAAc,gBAAiB,CAAA,MAAM,CAAC,CAAA,CAAA;AAC7C,IAAA,MAAA,CAAO,YAAY,MAAM,MAAA,CAAO,cAAc,gBAAiB,CAAA,MAAM,CAAC,CAAC,CAAA,CAAA;AAEvE,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF,CAAC;;;;;"}