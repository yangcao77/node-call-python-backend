'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');

class BackendPluginLifecycleImpl {
  constructor(logger, rootLifecycle, pluginMetadata) {
    this.logger = logger;
    this.rootLifecycle = rootLifecycle;
    this.pluginMetadata = pluginMetadata;
  }
  #hasStarted = false;
  #startupTasks = [];
  addStartupHook(hook, options) {
    if (this.#hasStarted) {
      throw new Error("Attempted to add startup hook after startup");
    }
    this.#startupTasks.push({ hook, options });
  }
  async startup() {
    if (this.#hasStarted) {
      return;
    }
    this.#hasStarted = true;
    this.logger.debug(
      `Running ${this.#startupTasks.length} plugin startup tasks...`
    );
    await Promise.all(
      this.#startupTasks.map(async ({ hook, options }) => {
        const logger = options?.logger ?? this.logger;
        try {
          await hook();
          logger.debug(`Plugin startup hook succeeded`);
        } catch (error) {
          logger.error(`Plugin startup hook failed, ${error}`);
        }
      })
    );
  }
  addShutdownHook(hook, options) {
    const plugin = this.pluginMetadata.getId();
    this.rootLifecycle.addShutdownHook(hook, {
      logger: options?.logger?.child({ plugin }) ?? this.logger
    });
  }
}
const lifecycleServiceFactory = backendPluginApi.createServiceFactory({
  service: backendPluginApi.coreServices.lifecycle,
  deps: {
    logger: backendPluginApi.coreServices.logger,
    rootLifecycle: backendPluginApi.coreServices.rootLifecycle,
    pluginMetadata: backendPluginApi.coreServices.pluginMetadata
  },
  async factory({ rootLifecycle, logger, pluginMetadata }) {
    return new BackendPluginLifecycleImpl(
      logger,
      rootLifecycle,
      pluginMetadata
    );
  }
});

exports.lifecycleServiceFactory = lifecycleServiceFactory;
//# sourceMappingURL=lifecycle.cjs.js.map
