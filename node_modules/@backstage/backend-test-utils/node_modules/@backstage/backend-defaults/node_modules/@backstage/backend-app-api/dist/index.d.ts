import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { BackendFeature, ServiceFactory } from '@backstage/backend-plugin-api';

/**
 * @public
 */
interface Backend {
    add(feature: BackendFeature | Promise<{
        default: BackendFeature;
    }>): void;
    start(): Promise<void>;
    stop(): Promise<void>;
}
/**
 * @public
 */
interface CreateSpecializedBackendOptions {
    defaultServiceFactories: ServiceFactory[];
}

/**
 * @public
 */
declare function createSpecializedBackend(options: CreateSpecializedBackendOptions): Backend;

/**
 * An identity client options object which allows extra configurations
 *
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
type IdentityFactoryOptions = {
    issuer?: string;
    /**
     * JWS "alg" (Algorithm) Header Parameter values. Defaults to an array containing just ES256.
     * More info on supported algorithms: https://github.com/panva/jose
     */
    algorithms?: string[];
};
/**
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
declare const identityServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.IdentityService, "plugin", "singleton", IdentityFactoryOptions>;

/**
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
declare const tokenManagerServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.TokenManagerService, "plugin", "singleton", undefined>;

export { type Backend, type CreateSpecializedBackendOptions, type IdentityFactoryOptions, createSpecializedBackend, identityServiceFactory, tokenManagerServiceFactory };
