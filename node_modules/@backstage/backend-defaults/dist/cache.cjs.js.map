{"version":3,"file":"cache.cjs.js","sources":["../src/entrypoints/cache/types.ts","../src/entrypoints/cache/CacheClient.ts","../src/entrypoints/cache/CacheManager.ts","../src/entrypoints/cache/cacheServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { HumanDuration, durationToMilliseconds } from '@backstage/types';\n\n/**\n * Options given when constructing a {@link CacheManager}.\n *\n * @public\n */\nexport type CacheManagerOptions = {\n  /**\n   * An optional logger for use by the PluginCacheManager.\n   */\n  logger?: LoggerService;\n\n  /**\n   * An optional handler for connection errors emitted from the underlying data\n   * store.\n   */\n  onError?: (err: Error) => void;\n};\n\nexport function ttlToMilliseconds(ttl: number | HumanDuration): number {\n  return typeof ttl === 'number' ? ttl : durationToMilliseconds(ttl);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  CacheServiceSetOptions,\n} from '@backstage/backend-plugin-api';\nimport { JsonValue } from '@backstage/types';\nimport { createHash } from 'crypto';\nimport Keyv from 'keyv';\nimport { ttlToMilliseconds } from './types';\n\nexport type CacheClientFactory = (options: CacheServiceOptions) => Keyv;\n\n/**\n * A basic, concrete implementation of the CacheService, suitable for almost\n * all uses in Backstage.\n */\nexport class DefaultCacheClient implements CacheService {\n  #client: Keyv;\n  #clientFactory: CacheClientFactory;\n  #options: CacheServiceOptions;\n\n  constructor(\n    client: Keyv,\n    clientFactory: CacheClientFactory,\n    options: CacheServiceOptions,\n  ) {\n    this.#client = client;\n    this.#clientFactory = clientFactory;\n    this.#options = options;\n  }\n\n  async get<TValue extends JsonValue>(\n    key: string,\n  ): Promise<TValue | undefined> {\n    const k = this.getNormalizedKey(key);\n    const value = await this.#client.get(k);\n    return value as TValue | undefined;\n  }\n\n  async set(\n    key: string,\n    value: JsonValue,\n    opts: CacheServiceSetOptions = {},\n  ): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    const ttl =\n      opts.ttl !== undefined ? ttlToMilliseconds(opts.ttl) : undefined;\n    await this.#client.set(k, value, ttl);\n  }\n\n  async delete(key: string): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.#client.delete(k);\n  }\n\n  withOptions(options: CacheServiceOptions): CacheService {\n    const newOptions = { ...this.#options, ...options };\n    return new DefaultCacheClient(\n      this.#clientFactory(newOptions),\n      this.#clientFactory,\n      newOptions,\n    );\n  }\n\n  /**\n   * Ensures keys are well-formed for any/all cache stores.\n   */\n  private getNormalizedKey(candidateKey: string): string {\n    // Remove potentially invalid characters.\n    const wellFormedKey = Buffer.from(candidateKey).toString('base64');\n\n    // Memcache in particular doesn't do well with keys > 250 bytes.\n    // Padded because a plugin ID is also prepended to the key.\n    if (wellFormedKey.length < 200) {\n      return wellFormedKey;\n    }\n\n    return createHash('sha256').update(candidateKey).digest('base64');\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport Keyv from 'keyv';\nimport { DefaultCacheClient } from './CacheClient';\nimport { CacheManagerOptions, ttlToMilliseconds } from './types';\nimport { durationToMilliseconds } from '@backstage/types';\n\ntype StoreFactory = (pluginId: string, defaultTtl: number | undefined) => Keyv;\n\n/**\n * Implements a Cache Manager which will automatically create new cache clients\n * for plugins when requested. All requested cache clients are created with the\n * connection details provided.\n *\n * @public\n */\nexport class CacheManager {\n  /**\n   * Keys represent supported `backend.cache.store` values, mapped to factories\n   * that return Keyv instances appropriate to the store.\n   */\n  private readonly storeFactories = {\n    redis: this.createRedisStoreFactory(),\n    memcache: this.createMemcacheStoreFactory(),\n    memory: this.createMemoryStoreFactory(),\n  };\n\n  private readonly logger?: LoggerService;\n  private readonly store: keyof CacheManager['storeFactories'];\n  private readonly connection: string;\n  private readonly useRedisSets: boolean;\n  private readonly errorHandler: CacheManagerOptions['onError'];\n  private readonly defaultTtl?: number;\n\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    // If no `backend.cache` config is provided, instantiate the CacheManager\n    // with an in-memory cache client.\n    const store = config.getOptionalString('backend.cache.store') || 'memory';\n    const defaultTtlConfig = config.getOptional('backend.cache.defaultTtl');\n    const connectionString =\n      config.getOptionalString('backend.cache.connection') || '';\n    const useRedisSets =\n      config.getOptionalBoolean('backend.cache.useRedisSets') ?? true;\n    const logger = options.logger?.child({\n      type: 'cacheManager',\n    });\n\n    let defaultTtl: number | undefined;\n    if (defaultTtlConfig !== undefined && defaultTtlConfig !== null) {\n      if (typeof defaultTtlConfig === 'number') {\n        defaultTtl = defaultTtlConfig;\n      } else if (\n        typeof defaultTtlConfig === 'object' &&\n        !Array.isArray(defaultTtlConfig)\n      ) {\n        defaultTtl = durationToMilliseconds(defaultTtlConfig);\n      } else {\n        throw new Error(\n          `Invalid configuration backend.cache.defaultTtl: ${defaultTtlConfig}, expected milliseconds number or HumanDuration object`,\n        );\n      }\n    }\n\n    return new CacheManager(\n      store,\n      connectionString,\n      useRedisSets,\n      options.onError,\n      logger,\n      defaultTtl,\n    );\n  }\n\n  /** @internal */\n  constructor(\n    store: string,\n    connectionString: string,\n    useRedisSets: boolean,\n    errorHandler: CacheManagerOptions['onError'],\n    logger?: LoggerService,\n    defaultTtl?: number,\n  ) {\n    if (!this.storeFactories.hasOwnProperty(store)) {\n      throw new Error(`Unknown cache store: ${store}`);\n    }\n    this.logger = logger;\n    this.store = store as keyof CacheManager['storeFactories'];\n    this.connection = connectionString;\n    this.useRedisSets = useRedisSets;\n    this.errorHandler = errorHandler;\n    this.defaultTtl = defaultTtl;\n  }\n\n  /**\n   * Generates a PluginCacheManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the cache manager should be created for.\n   *        Plugin names should be unique.\n   */\n  forPlugin(pluginId: string): CacheService {\n    const clientFactory = (options: CacheServiceOptions) => {\n      const ttl = options.defaultTtl ?? this.defaultTtl;\n      return this.getClientWithTtl(\n        pluginId,\n        ttl !== undefined ? ttlToMilliseconds(ttl) : undefined,\n      );\n    };\n\n    return new DefaultCacheClient(clientFactory({}), clientFactory, {});\n  }\n\n  private getClientWithTtl(pluginId: string, ttl: number | undefined): Keyv {\n    return this.storeFactories[this.store](pluginId, ttl);\n  }\n\n  private createRedisStoreFactory(): StoreFactory {\n    const KeyvRedis = require('@keyv/redis');\n    let store: typeof KeyvRedis | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvRedis(this.connection, {\n          useRedisSets: this.useRedisSets,\n        });\n        // Always provide an error handler to avoid stopping the process\n        store.on('error', (err: Error) => {\n          this.logger?.error('Failed to create redis cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store,\n        emitErrors: false,\n        useRedisSets: this.useRedisSets,\n      });\n    };\n  }\n\n  private createMemcacheStoreFactory(): StoreFactory {\n    const KeyvMemcache = require('@keyv/memcache');\n    let store: typeof KeyvMemcache | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvMemcache(this.connection);\n        // Always provide an error handler to avoid stopping the process\n        store.on('error', (err: Error) => {\n          this.logger?.error('Failed to create memcache cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store,\n      });\n    };\n  }\n\n  private createMemoryStoreFactory(): StoreFactory {\n    const store = new Map();\n    return (pluginId, defaultTtl) =>\n      new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store,\n      });\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { CacheManager } from './CacheManager';\n\n/**\n * Key-value store for caching data.\n *\n * See {@link @backstage/code-plugin-api#CacheService}\n * and {@link https://backstage.io/docs/backend-system/core-services/cache | the service docs}\n * for more information.\n *\n * @public\n */\nexport const cacheServiceFactory = createServiceFactory({\n  service: coreServices.cache,\n  deps: {\n    config: coreServices.rootConfig,\n    plugin: coreServices.pluginMetadata,\n    logger: coreServices.rootLogger,\n  },\n  async createRootContext({ config, logger }) {\n    return CacheManager.fromConfig(config, { logger });\n  },\n  async factory({ plugin }, manager) {\n    return manager.forPlugin(plugin.getId());\n  },\n});\n"],"names":["durationToMilliseconds","createHash","Keyv","createServiceFactory","coreServices"],"mappings":";;;;;;;;;;;AAqCO,SAAS,kBAAkB,GAAqC,EAAA;AACrE,EAAA,OAAO,OAAO,GAAA,KAAQ,QAAW,GAAA,GAAA,GAAMA,6BAAuB,GAAG,CAAA,CAAA;AACnE;;ACPO,MAAM,kBAA2C,CAAA;AAAA,EACtD,OAAA,CAAA;AAAA,EACA,cAAA,CAAA;AAAA,EACA,QAAA,CAAA;AAAA,EAEA,WAAA,CACE,MACA,EAAA,aAAA,EACA,OACA,EAAA;AACA,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,cAAiB,GAAA,aAAA,CAAA;AACtB,IAAA,IAAA,CAAK,QAAW,GAAA,OAAA,CAAA;AAAA,GAClB;AAAA,EAEA,MAAM,IACJ,GAC6B,EAAA;AAC7B,IAAM,MAAA,CAAA,GAAI,IAAK,CAAA,gBAAA,CAAiB,GAAG,CAAA,CAAA;AACnC,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,CAAA;AACtC,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,GACJ,CAAA,GAAA,EACA,KACA,EAAA,IAAA,GAA+B,EAChB,EAAA;AACf,IAAM,MAAA,CAAA,GAAI,IAAK,CAAA,gBAAA,CAAiB,GAAG,CAAA,CAAA;AACnC,IAAA,MAAM,MACJ,IAAK,CAAA,GAAA,KAAQ,SAAY,iBAAkB,CAAA,IAAA,CAAK,GAAG,CAAI,GAAA,KAAA,CAAA,CAAA;AACzD,IAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,EAAG,OAAO,GAAG,CAAA,CAAA;AAAA,GACtC;AAAA,EAEA,MAAM,OAAO,GAA4B,EAAA;AACvC,IAAM,MAAA,CAAA,GAAI,IAAK,CAAA,gBAAA,CAAiB,GAAG,CAAA,CAAA;AACnC,IAAM,MAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,GAC7B;AAAA,EAEA,YAAY,OAA4C,EAAA;AACtD,IAAA,MAAM,aAAa,EAAE,GAAG,IAAK,CAAA,QAAA,EAAU,GAAG,OAAQ,EAAA,CAAA;AAClD,IAAA,OAAO,IAAI,kBAAA;AAAA,MACT,IAAA,CAAK,eAAe,UAAU,CAAA;AAAA,MAC9B,IAAK,CAAA,cAAA;AAAA,MACL,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,YAA8B,EAAA;AAErD,IAAA,MAAM,gBAAgB,MAAO,CAAA,IAAA,CAAK,YAAY,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AAIjE,IAAI,IAAA,aAAA,CAAc,SAAS,GAAK,EAAA;AAC9B,MAAO,OAAA,aAAA,CAAA;AAAA,KACT;AAEA,IAAA,OAAOC,kBAAW,QAAQ,CAAA,CAAE,OAAO,YAAY,CAAA,CAAE,OAAO,QAAQ,CAAA,CAAA;AAAA,GAClE;AACF;;AC3DO,MAAM,YAAa,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKP,cAAiB,GAAA;AAAA,IAChC,KAAA,EAAO,KAAK,uBAAwB,EAAA;AAAA,IACpC,QAAA,EAAU,KAAK,0BAA2B,EAAA;AAAA,IAC1C,MAAA,EAAQ,KAAK,wBAAyB,EAAA;AAAA,GACxC,CAAA;AAAA,EAEiB,MAAA,CAAA;AAAA,EACA,KAAA,CAAA;AAAA,EACA,UAAA,CAAA;AAAA,EACA,YAAA,CAAA;AAAA,EACA,YAAA,CAAA;AAAA,EACA,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjB,OAAO,UAAA,CACL,MACA,EAAA,OAAA,GAA+B,EACjB,EAAA;AAGd,IAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,iBAAkB,CAAA,qBAAqB,CAAK,IAAA,QAAA,CAAA;AACjE,IAAM,MAAA,gBAAA,GAAmB,MAAO,CAAA,WAAA,CAAY,0BAA0B,CAAA,CAAA;AACtE,IAAA,MAAM,gBACJ,GAAA,MAAA,CAAO,iBAAkB,CAAA,0BAA0B,CAAK,IAAA,EAAA,CAAA;AAC1D,IAAA,MAAM,YACJ,GAAA,MAAA,CAAO,kBAAmB,CAAA,4BAA4B,CAAK,IAAA,IAAA,CAAA;AAC7D,IAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,MAAA,EAAQ,KAAM,CAAA;AAAA,MACnC,IAAM,EAAA,cAAA;AAAA,KACP,CAAA,CAAA;AAED,IAAI,IAAA,UAAA,CAAA;AACJ,IAAI,IAAA,gBAAA,KAAqB,KAAa,CAAA,IAAA,gBAAA,KAAqB,IAAM,EAAA;AAC/D,MAAI,IAAA,OAAO,qBAAqB,QAAU,EAAA;AACxC,QAAa,UAAA,GAAA,gBAAA,CAAA;AAAA,OACf,MAAA,IACE,OAAO,gBAAqB,KAAA,QAAA,IAC5B,CAAC,KAAM,CAAA,OAAA,CAAQ,gBAAgB,CAC/B,EAAA;AACA,QAAA,UAAA,GAAaD,6BAAuB,gBAAgB,CAAA,CAAA;AAAA,OAC/C,MAAA;AACL,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,mDAAmD,gBAAgB,CAAA,sDAAA,CAAA;AAAA,SACrE,CAAA;AAAA,OACF;AAAA,KACF;AAEA,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,KAAA;AAAA,MACA,gBAAA;AAAA,MACA,YAAA;AAAA,MACA,OAAQ,CAAA,OAAA;AAAA,MACR,MAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA;AAAA,EAGA,YACE,KACA,EAAA,gBAAA,EACA,YACA,EAAA,YAAA,EACA,QACA,UACA,EAAA;AACA,IAAA,IAAI,CAAC,IAAA,CAAK,cAAe,CAAA,cAAA,CAAe,KAAK,CAAG,EAAA;AAC9C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAwB,qBAAA,EAAA,KAAK,CAAE,CAAA,CAAA,CAAA;AAAA,KACjD;AACA,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,UAAa,GAAA,gBAAA,CAAA;AAClB,IAAA,IAAA,CAAK,YAAe,GAAA,YAAA,CAAA;AACpB,IAAA,IAAA,CAAK,YAAe,GAAA,YAAA,CAAA;AACpB,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAAA,GACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,QAAgC,EAAA;AACxC,IAAM,MAAA,aAAA,GAAgB,CAAC,OAAiC,KAAA;AACtD,MAAM,MAAA,GAAA,GAAM,OAAQ,CAAA,UAAA,IAAc,IAAK,CAAA,UAAA,CAAA;AACvC,MAAA,OAAO,IAAK,CAAA,gBAAA;AAAA,QACV,QAAA;AAAA,QACA,GAAQ,KAAA,KAAA,CAAA,GAAY,iBAAkB,CAAA,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,OAC/C,CAAA;AAAA,KACF,CAAA;AAEA,IAAO,OAAA,IAAI,mBAAmB,aAAc,CAAA,EAAE,CAAG,EAAA,aAAA,EAAe,EAAE,CAAA,CAAA;AAAA,GACpE;AAAA,EAEQ,gBAAA,CAAiB,UAAkB,GAA+B,EAAA;AACxE,IAAA,OAAO,KAAK,cAAe,CAAA,IAAA,CAAK,KAAK,CAAA,CAAE,UAAU,GAAG,CAAA,CAAA;AAAA,GACtD;AAAA,EAEQ,uBAAwC,GAAA;AAC9C,IAAM,MAAA,SAAA,GAAY,QAAQ,aAAa,CAAA,CAAA;AACvC,IAAI,IAAA,KAAA,CAAA;AACJ,IAAO,OAAA,CAAC,UAAU,UAAe,KAAA;AAC/B,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAQ,KAAA,GAAA,IAAI,SAAU,CAAA,IAAA,CAAK,UAAY,EAAA;AAAA,UACrC,cAAc,IAAK,CAAA,YAAA;AAAA,SACpB,CAAA,CAAA;AAED,QAAM,KAAA,CAAA,EAAA,CAAG,OAAS,EAAA,CAAC,GAAe,KAAA;AAChC,UAAK,IAAA,CAAA,MAAA,EAAQ,KAAM,CAAA,qCAAA,EAAuC,GAAG,CAAA,CAAA;AAC7D,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA,CAAA;AAAA,SACxB,CAAA,CAAA;AAAA,OACH;AACA,MAAA,OAAO,IAAIE,qBAAK,CAAA;AAAA,QACd,SAAW,EAAA,QAAA;AAAA,QACX,GAAK,EAAA,UAAA;AAAA,QACL,KAAA;AAAA,QACA,UAAY,EAAA,KAAA;AAAA,QACZ,cAAc,IAAK,CAAA,YAAA;AAAA,OACpB,CAAA,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAEQ,0BAA2C,GAAA;AACjD,IAAM,MAAA,YAAA,GAAe,QAAQ,gBAAgB,CAAA,CAAA;AAC7C,IAAI,IAAA,KAAA,CAAA;AACJ,IAAO,OAAA,CAAC,UAAU,UAAe,KAAA;AAC/B,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAQ,KAAA,GAAA,IAAI,YAAa,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAExC,QAAM,KAAA,CAAA,EAAA,CAAG,OAAS,EAAA,CAAC,GAAe,KAAA;AAChC,UAAK,IAAA,CAAA,MAAA,EAAQ,KAAM,CAAA,wCAAA,EAA0C,GAAG,CAAA,CAAA;AAChE,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA,CAAA;AAAA,SACxB,CAAA,CAAA;AAAA,OACH;AACA,MAAA,OAAO,IAAIA,qBAAK,CAAA;AAAA,QACd,SAAW,EAAA,QAAA;AAAA,QACX,GAAK,EAAA,UAAA;AAAA,QACL,UAAY,EAAA,KAAA;AAAA,QACZ,KAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAEQ,wBAAyC,GAAA;AAC/C,IAAM,MAAA,KAAA,uBAAY,GAAI,EAAA,CAAA;AACtB,IAAA,OAAO,CAAC,QAAA,EAAU,UAChB,KAAA,IAAIA,qBAAK,CAAA;AAAA,MACP,SAAW,EAAA,QAAA;AAAA,MACX,GAAK,EAAA,UAAA;AAAA,MACL,UAAY,EAAA,KAAA;AAAA,MACZ,KAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACL;AACF;;ACxKO,MAAM,sBAAsBC,qCAAqB,CAAA;AAAA,EACtD,SAASC,6BAAa,CAAA,KAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACJ,QAAQA,6BAAa,CAAA,UAAA;AAAA,IACrB,QAAQA,6BAAa,CAAA,cAAA;AAAA,IACrB,QAAQA,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,MAAM,iBAAA,CAAkB,EAAE,MAAA,EAAQ,QAAU,EAAA;AAC1C,IAAA,OAAO,YAAa,CAAA,UAAA,CAAW,MAAQ,EAAA,EAAE,QAAQ,CAAA,CAAA;AAAA,GACnD;AAAA,EACA,MAAM,OAAA,CAAQ,EAAE,MAAA,IAAU,OAAS,EAAA;AACjC,IAAA,OAAO,OAAQ,CAAA,SAAA,CAAU,MAAO,CAAA,KAAA,EAAO,CAAA,CAAA;AAAA,GACzC;AACF,CAAC;;;;;"}