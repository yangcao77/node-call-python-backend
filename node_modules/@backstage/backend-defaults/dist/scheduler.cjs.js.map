{"version":3,"file":"scheduler.cjs.js","sources":["../src/entrypoints/scheduler/database/tables.ts","../src/entrypoints/scheduler/database/migrateBackendTasks.ts","../src/entrypoints/scheduler/lib/util.ts","../src/entrypoints/scheduler/lib/LocalTaskWorker.ts","../src/entrypoints/scheduler/lib/types.ts","../src/entrypoints/scheduler/lib/TaskWorker.ts","../src/entrypoints/scheduler/lib/PluginTaskSchedulerImpl.ts","../src/entrypoints/scheduler/lib/PluginTaskSchedulerJanitor.ts","../src/entrypoints/scheduler/lib/DefaultSchedulerService.ts","../src/entrypoints/scheduler/schedulerServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DB_MIGRATIONS_TABLE = 'backstage_backend_tasks__knex_migrations';\nexport const DB_TASKS_TABLE = 'backstage_backend_tasks__tasks';\n\nexport type DbTasksRow = {\n  id: string;\n  settings_json: string;\n  next_run_start_at: Date;\n  current_run_ticket?: string;\n  current_run_started_at?: Date | string;\n  current_run_expires_at?: Date | string;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-plugin-api';\nimport { Knex } from 'knex';\nimport { DB_MIGRATIONS_TABLE } from './tables';\n\nexport async function migrateBackendTasks(knex: Knex): Promise<void> {\n  const migrationsDir = resolvePackagePath(\n    '@backstage/backend-defaults',\n    'migrations/scheduler',\n  );\n\n  await knex.migrate.latest({\n    directory: migrationsDir,\n    tableName: DB_MIGRATIONS_TABLE,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\n\nexport const TRACER_ID = 'backstage-service-scheduler';\n\n// Keep the IDs compatible with e.g. Prometheus labels\nexport function validateId(id: string) {\n  if (typeof id !== 'string' || !id.trim()) {\n    throw new InputError(`${id} is not a valid ID, expected non-empty string`);\n  }\n}\n\nexport function dbTime(t: Date | string): DateTime {\n  if (typeof t === 'string') {\n    return DateTime.fromSQL(t);\n  }\n  return DateTime.fromJSDate(t);\n}\n\nexport function nowPlus(duration: Duration | undefined, knex: Knex) {\n  const seconds = duration?.as('seconds') ?? 0;\n  if (!seconds) {\n    return knex.fn.now();\n  }\n\n  if (knex.client.config.client.includes('sqlite3')) {\n    return knex.raw(`datetime('now', ?)`, [`${seconds} seconds`]);\n  }\n\n  if (knex.client.config.client.includes('mysql')) {\n    return knex.raw(`now() + interval ${seconds} second`);\n  }\n\n  return knex.raw(`now() + interval '${seconds} seconds'`);\n}\n\n/**\n * Sleep for the given duration, but return sooner if the abort signal\n * triggers.\n *\n * @param duration - The amount of time to sleep, at most\n * @param abortSignal - An optional abort signal that short circuits the wait\n */\nexport async function sleep(\n  duration: Duration,\n  abortSignal?: AbortSignal,\n): Promise<void> {\n  if (abortSignal?.aborted) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    let timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\n    const done = () => {\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      abortSignal?.removeEventListener('abort', done);\n      resolve();\n    };\n\n    timeoutHandle = setTimeout(done, duration.as('milliseconds'));\n    abortSignal?.addEventListener('abort', done);\n  });\n}\n\n/**\n * Creates a new AbortController that, in addition to working as a regular\n * standalone controller, also gets aborted if the given parent signal\n * reaches aborted state.\n *\n * @param parent - The \"parent\" signal that can trigger the delegate\n */\nexport function delegateAbortController(parent?: AbortSignal): AbortController {\n  const delegate = new AbortController();\n\n  if (parent) {\n    if (parent.aborted) {\n      delegate.abort();\n    } else {\n      const onParentAborted = () => {\n        delegate.abort();\n      };\n\n      const onChildAborted = () => {\n        parent.removeEventListener('abort', onParentAborted);\n      };\n\n      parent.addEventListener('abort', onParentAborted, { once: true });\n      delegate.signal.addEventListener('abort', onChildAborted, { once: true });\n    }\n  }\n\n  return delegate;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { SchedulerServiceTaskFunction } from '@backstage/backend-plugin-api';\nimport { ConflictError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { DateTime, Duration } from 'luxon';\nimport { TaskSettingsV2 } from './types';\nimport { delegateAbortController, sleep } from './util';\n\n/**\n * Implements tasks that run locally without cross-host collaboration.\n *\n * @private\n */\nexport class LocalTaskWorker {\n  private abortWait: AbortController | undefined;\n\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: SchedulerServiceTaskFunction,\n    private readonly logger: LoggerService,\n  ) {}\n\n  start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    (async () => {\n      let attemptNum = 1;\n      for (;;) {\n        try {\n          if (settings.initialDelayDuration) {\n            await this.sleep(\n              Duration.fromISO(settings.initialDelayDuration),\n              options?.signal,\n            );\n          }\n\n          while (!options?.signal?.aborted) {\n            const startTime = process.hrtime();\n            await this.runOnce(settings, options?.signal);\n            const timeTaken = process.hrtime(startTime);\n            await this.waitUntilNext(\n              settings,\n              (timeTaken[0] + timeTaken[1] / 1e9) * 1000,\n              options?.signal,\n            );\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  trigger(): void {\n    if (!this.abortWait) {\n      throw new ConflictError(`Task ${this.taskId} is currently running`);\n    }\n    this.abortWait.abort();\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion.\n   */\n  private async runOnce(\n    settings: TaskSettingsV2,\n    signal?: AbortSignal,\n  ): Promise<void> {\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(settings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n    } catch (e) {\n      // ignore intentionally\n    }\n\n    // release resources\n    clearTimeout(timeoutHandle);\n    taskAbortController.abort();\n  }\n\n  /**\n   * Sleeps until it's time to run the task again.\n   */\n  private async waitUntilNext(\n    settings: TaskSettingsV2,\n    lastRunMillis: number,\n    signal?: AbortSignal,\n  ) {\n    if (signal?.aborted) {\n      return;\n    }\n\n    const isCron = !settings.cadence.startsWith('P');\n    let dt: number;\n\n    if (isCron) {\n      const nextRun = +new CronTime(settings.cadence).sendAt().toJSDate();\n      dt = nextRun - Date.now();\n    } else {\n      dt =\n        Duration.fromISO(settings.cadence).as('milliseconds') - lastRunMillis;\n    }\n\n    dt = Math.max(dt, 0);\n\n    this.logger.debug(\n      `task: ${this.taskId} will next occur around ${DateTime.now().plus(\n        Duration.fromMillis(dt),\n      )}`,\n    );\n\n    await this.sleep(Duration.fromMillis(dt), signal);\n  }\n\n  private async sleep(\n    duration: Duration,\n    abortSignal?: AbortSignal,\n  ): Promise<void> {\n    this.abortWait = delegateAbortController(abortSignal);\n    await sleep(duration, this.abortWait.signal);\n    this.abortWait.abort(); // cleans up resources\n    this.abortWait = undefined;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CronTime } from 'cron';\nimport { Duration } from 'luxon';\nimport { z } from 'zod';\n\nfunction isValidOptionalDurationString(d: string | undefined): boolean {\n  try {\n    return !d || Duration.fromISO(d).isValid;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidCronFormat(c: string | undefined): boolean {\n  try {\n    if (!c) {\n      return false;\n    }\n    // parse cron format to ensure it's a valid format.\n    // eslint-disable-next-line no-new\n    new CronTime(c);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidTrigger(t: string): boolean {\n  return t === 'manual';\n}\n\nexport const taskSettingsV1Schema = z.object({\n  version: z.literal(1),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  recurringAtMostEveryDuration: z\n    .string()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n});\n\n/**\n * The properties that control a scheduled task (version 1).\n */\nexport type TaskSettingsV1 = z.infer<typeof taskSettingsV1Schema>;\n\nexport const taskSettingsV2Schema = z.object({\n  version: z.literal(2),\n  cadence: z\n    .string()\n    .refine(isValidCronFormat, { message: 'Invalid cron' })\n    .or(\n      z.string().refine(isValidTrigger, {\n        message: \"Invalid trigger, expecting 'manual'\",\n      }),\n    )\n    .or(\n      z.string().refine(isValidOptionalDurationString, {\n        message: 'Invalid duration, expecting ISO Period',\n      }),\n    ),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n});\n\n/**\n * The properties that control a scheduled task (version 2).\n */\nexport type TaskSettingsV2 = z.infer<typeof taskSettingsV2Schema>;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { v4 as uuid } from 'uuid';\nimport { DB_TASKS_TABLE, DbTasksRow } from '../database/tables';\nimport { TaskSettingsV2, taskSettingsV2Schema } from './types';\nimport { delegateAbortController, nowPlus, sleep } from './util';\nimport { SchedulerServiceTaskFunction } from '@backstage/backend-plugin-api';\n\nconst DEFAULT_WORK_CHECK_FREQUENCY = Duration.fromObject({ seconds: 5 });\n\n/**\n * Implements tasks that run across worker hosts, with collaborative locking.\n *\n * @private\n */\nexport class TaskWorker {\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: SchedulerServiceTaskFunction,\n    private readonly knex: Knex,\n    private readonly logger: LoggerService,\n    private readonly workCheckFrequency: Duration = DEFAULT_WORK_CHECK_FREQUENCY,\n  ) {}\n\n  async start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    try {\n      await this.persistTask(settings);\n    } catch (e) {\n      throw new Error(`Failed to persist task, ${e}`);\n    }\n\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    let workCheckFrequency = this.workCheckFrequency;\n    const isDuration = settings?.cadence.startsWith('P');\n    if (isDuration) {\n      const cadence = Duration.fromISO(settings.cadence);\n      if (cadence < workCheckFrequency) {\n        workCheckFrequency = cadence;\n      }\n    }\n\n    let attemptNum = 1;\n    (async () => {\n      for (;;) {\n        try {\n          if (settings.initialDelayDuration) {\n            await sleep(\n              Duration.fromISO(settings.initialDelayDuration),\n              options?.signal,\n            );\n          }\n\n          while (!options?.signal?.aborted) {\n            const runResult = await this.runOnce(options?.signal);\n\n            if (runResult.result === 'abort') {\n              break;\n            }\n\n            await sleep(workCheckFrequency, options?.signal);\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  static async trigger(knex: Knex, taskId: string): Promise<void> {\n    // check if task exists\n    const rows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .select(knex.raw(1))\n      .where('id', '=', taskId);\n    if (rows.length !== 1) {\n      throw new NotFoundError(`Task ${taskId} does not exist`);\n    }\n\n    const updatedRows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        next_run_start_at: knex.fn.now(),\n      });\n    if (updatedRows < 1) {\n      throw new ConflictError(`Task ${taskId} is currently running`);\n    }\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion, if ready.\n   *\n   * @returns The outcome of the attempt\n   */\n  private async runOnce(\n    signal?: AbortSignal,\n  ): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'failed' }\n    | { result: 'completed' }\n  > {\n    const findResult = await this.findReadyTask();\n    if (\n      findResult.result === 'not-ready-yet' ||\n      findResult.result === 'abort'\n    ) {\n      return findResult;\n    }\n\n    const taskSettings = findResult.settings;\n    const ticket = uuid();\n\n    const claimed = await this.tryClaimTask(ticket, taskSettings);\n    if (!claimed) {\n      return { result: 'not-ready-yet' };\n    }\n\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(taskSettings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n      taskAbortController.abort(); // releases resources\n    } catch (e) {\n      this.logger.error(e);\n      await this.tryReleaseTask(ticket, taskSettings);\n      return { result: 'failed' };\n    } finally {\n      clearTimeout(timeoutHandle);\n    }\n\n    await this.tryReleaseTask(ticket, taskSettings);\n    return { result: 'completed' };\n  }\n\n  /**\n   * Perform the initial store of the task info\n   */\n  async persistTask(settings: TaskSettingsV2) {\n    // Perform an initial parse to ensure that we will definitely be able to\n    // read it back again.\n    taskSettingsV2Schema.parse(settings);\n\n    const isManual = settings?.cadence === 'manual';\n    const isDuration = settings?.cadence.startsWith('P');\n    const isCron = !isManual && !isDuration;\n\n    let startAt: Knex.Raw | undefined;\n    let nextStartAt: Knex.Raw | undefined;\n    if (settings.initialDelayDuration) {\n      startAt = nowPlus(\n        Duration.fromISO(settings.initialDelayDuration),\n        this.knex,\n      );\n    }\n\n    if (isCron) {\n      const time = new CronTime(settings.cadence)\n        .sendAt()\n        .minus({ seconds: 1 }) // immediately, if \"* * * * * *\"\n        .toUTC();\n\n      nextStartAt = this.nextRunAtRaw(time);\n      startAt ||= nextStartAt;\n    } else if (isManual) {\n      nextStartAt = this.knex.raw('null');\n      startAt ||= nextStartAt;\n    } else {\n      startAt ||= this.knex.fn.now();\n      nextStartAt = nowPlus(Duration.fromISO(settings.cadence), this.knex);\n    }\n\n    this.logger.debug(`task: ${this.taskId} configured to run at: ${startAt}`);\n\n    // It's OK if the task already exists; if it does, just replace its\n    // settings with the new value and start the loop as usual.\n    const settingsJson = JSON.stringify(settings);\n    await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .insert({\n        id: this.taskId,\n        settings_json: settingsJson,\n        next_run_start_at: startAt,\n      })\n      .onConflict('id')\n      .merge(\n        this.knex.client.config.client.includes('mysql')\n          ? {\n              settings_json: settingsJson,\n              next_run_start_at: this.knex.raw(\n                `CASE WHEN ?? < ?? THEN ?? ELSE ?? END`,\n                [\n                  nextStartAt,\n                  'next_run_start_at',\n                  nextStartAt,\n                  'next_run_start_at',\n                ],\n              ),\n            }\n          : {\n              settings_json: this.knex.ref('excluded.settings_json'),\n              next_run_start_at: this.knex.raw(\n                `CASE WHEN ?? < ?? THEN ?? ELSE ?? END`,\n                [\n                  nextStartAt,\n                  `${DB_TASKS_TABLE}.next_run_start_at`,\n                  nextStartAt,\n                  `${DB_TASKS_TABLE}.next_run_start_at`,\n                ],\n              ),\n            },\n      );\n  }\n\n  /**\n   * Check if the task is ready to run\n   */\n  async findReadyTask(): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'ready'; settings: TaskSettingsV2 }\n  > {\n    const [row] = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .select({\n        settingsJson: 'settings_json',\n        ready: this.knex.raw(\n          `CASE\n            WHEN next_run_start_at <= ? AND current_run_ticket IS NULL THEN TRUE\n            ELSE FALSE\n          END`,\n          [this.knex.fn.now()],\n        ),\n      });\n\n    if (!row) {\n      this.logger.info(\n        'No longer able to find task; aborting and assuming that it has been unregistered or expired',\n      );\n      return { result: 'abort' };\n    } else if (!row.ready) {\n      return { result: 'not-ready-yet' };\n    }\n\n    try {\n      const obj = JSON.parse(row.settingsJson);\n      const settings = taskSettingsV2Schema.parse(obj);\n      return { result: 'ready', settings };\n    } catch (e) {\n      this.logger.info(\n        `Task \"${this.taskId}\" is no longer able to parse task settings; aborting and assuming that a ` +\n          `newer version of the task has been issued and being handled by other workers, ${e}`,\n      );\n      return { result: 'abort' };\n    }\n  }\n\n  /**\n   * Attempts to claim a task that's ready for execution, on this worker's\n   * behalf. We should not attempt to perform the work unless the claim really\n   * goes through.\n   *\n   * @param ticket - A globally unique string that changes for each invocation\n   * @param settings - The settings of the task to claim\n   * @returns True if it was successfully claimed\n   */\n  async tryClaimTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const startedAt = this.knex.fn.now();\n    const expiresAt = settings.timeoutAfterDuration\n      ? nowPlus(Duration.fromISO(settings.timeoutAfterDuration), this.knex)\n      : this.knex.raw('null');\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        current_run_ticket: ticket,\n        current_run_started_at: startedAt,\n        current_run_expires_at: expiresAt,\n      });\n\n    return rows === 1;\n  }\n\n  async tryReleaseTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const isManual = settings?.cadence === 'manual';\n    const isDuration = settings?.cadence.startsWith('P');\n    const isCron = !isManual && !isDuration;\n\n    let nextRun: Knex.Raw;\n    if (isCron) {\n      const time = new CronTime(settings.cadence).sendAt().toUTC();\n      this.logger.debug(`task: ${this.taskId} will next occur around ${time}`);\n\n      nextRun = this.nextRunAtRaw(time);\n    } else if (isManual) {\n      nextRun = this.knex.raw('null');\n    } else {\n      const dt = Duration.fromISO(settings.cadence).as('seconds');\n      this.logger.debug(\n        `task: ${this.taskId} will next occur around ${DateTime.now().plus({\n          seconds: dt,\n        })}`,\n      );\n\n      if (this.knex.client.config.client.includes('sqlite3')) {\n        nextRun = this.knex.raw(\n          `max(datetime(next_run_start_at, ?), datetime('now'))`,\n          [`+${dt} seconds`],\n        );\n      } else if (this.knex.client.config.client.includes('mysql')) {\n        nextRun = this.knex.raw(\n          `greatest(next_run_start_at + interval ${dt} second, now())`,\n        );\n      } else {\n        nextRun = this.knex.raw(\n          `greatest(next_run_start_at + interval '${dt} seconds', now())`,\n        );\n      }\n    }\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .where('current_run_ticket', '=', ticket)\n      .update({\n        next_run_start_at: nextRun,\n        current_run_ticket: this.knex.raw('null'),\n        current_run_started_at: this.knex.raw('null'),\n        current_run_expires_at: this.knex.raw('null'),\n      });\n\n    return rows === 1;\n  }\n\n  private nextRunAtRaw(time: DateTime): Knex.Raw {\n    if (this.knex.client.config.client.includes('sqlite3')) {\n      return this.knex.raw('datetime(?)', [time.toISO()]);\n    } else if (this.knex.client.config.client.includes('mysql')) {\n      return this.knex.raw(`?`, [time.toSQL({ includeOffset: false })]);\n    }\n    return this.knex.raw(`?`, [time.toISO()]);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskDescriptor,\n  SchedulerServiceTaskFunction,\n  SchedulerServiceTaskInvocationDefinition,\n  SchedulerServiceTaskRunner,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { Counter, Histogram, metrics, trace } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { LocalTaskWorker } from './LocalTaskWorker';\nimport { TaskWorker } from './TaskWorker';\nimport { TaskSettingsV2 } from './types';\nimport { TRACER_ID, validateId } from './util';\n\nconst tracer = trace.getTracer(TRACER_ID);\n\n/**\n * Implements the actual task management.\n */\nexport class PluginTaskSchedulerImpl implements SchedulerService {\n  private readonly localTasksById = new Map<string, LocalTaskWorker>();\n  private readonly allScheduledTasks: SchedulerServiceTaskDescriptor[] = [];\n\n  private readonly counter: Counter;\n  private readonly duration: Histogram;\n\n  constructor(\n    private readonly databaseFactory: () => Promise<Knex>,\n    private readonly logger: LoggerService,\n  ) {\n    const meter = metrics.getMeter('default');\n    this.counter = meter.createCounter('backend_tasks.task.runs.count', {\n      description: 'Total number of times a task has been run',\n    });\n    this.duration = meter.createHistogram('backend_tasks.task.runs.duration', {\n      description: 'Histogram of task run durations',\n      unit: 'seconds',\n    });\n  }\n\n  async triggerTask(id: string): Promise<void> {\n    const localTask = this.localTasksById.get(id);\n    if (localTask) {\n      localTask.trigger();\n      return;\n    }\n\n    const knex = await this.databaseFactory();\n    await TaskWorker.trigger(knex, id);\n  }\n\n  async scheduleTask(\n    task: SchedulerServiceTaskScheduleDefinition &\n      SchedulerServiceTaskInvocationDefinition,\n  ): Promise<void> {\n    validateId(task.id);\n    const scope = task.scope ?? 'global';\n\n    const settings: TaskSettingsV2 = {\n      version: 2,\n      cadence: parseDuration(task.frequency),\n      initialDelayDuration:\n        task.initialDelay && parseDuration(task.initialDelay),\n      timeoutAfterDuration: parseDuration(task.timeout),\n    };\n\n    if (scope === 'global') {\n      const knex = await this.databaseFactory();\n      const worker = new TaskWorker(\n        task.id,\n        this.instrumentedFunction(task, scope),\n        knex,\n        this.logger.child({ task: task.id }),\n      );\n      await worker.start(settings, { signal: task.signal });\n    } else {\n      const worker = new LocalTaskWorker(\n        task.id,\n        this.instrumentedFunction(task, scope),\n        this.logger.child({ task: task.id }),\n      );\n      worker.start(settings, { signal: task.signal });\n      this.localTasksById.set(task.id, worker);\n    }\n\n    this.allScheduledTasks.push({\n      id: task.id,\n      scope: scope,\n      settings: settings,\n    });\n  }\n\n  createScheduledTaskRunner(\n    schedule: SchedulerServiceTaskScheduleDefinition,\n  ): SchedulerServiceTaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n\n  async getScheduledTasks(): Promise<SchedulerServiceTaskDescriptor[]> {\n    return this.allScheduledTasks;\n  }\n\n  private instrumentedFunction(\n    task: SchedulerServiceTaskInvocationDefinition,\n    scope: string,\n  ): SchedulerServiceTaskFunction {\n    return async abort => {\n      const labels: Record<string, string> = {\n        taskId: task.id,\n        scope,\n      };\n      this.counter.add(1, { ...labels, result: 'started' });\n\n      const startTime = process.hrtime();\n\n      try {\n        await tracer.startActiveSpan(`task ${task.id}`, async span => {\n          try {\n            span.setAttributes(labels);\n            await task.fn(abort);\n          } catch (error) {\n            if (error instanceof Error) {\n              span.recordException(error);\n            }\n            throw error;\n          } finally {\n            span.end();\n          }\n        });\n        labels.result = 'completed';\n      } catch (ex) {\n        labels.result = 'failed';\n        throw ex;\n      } finally {\n        const delta = process.hrtime(startTime);\n        const endTime = delta[0] + delta[1] / 1e9;\n        this.counter.add(1, labels);\n        this.duration.record(endTime, labels);\n      }\n    };\n  }\n}\n\nexport function parseDuration(\n  frequency: SchedulerServiceTaskScheduleDefinition['frequency'],\n): string {\n  if (typeof frequency === 'object' && 'cron' in frequency) {\n    return frequency.cron;\n  }\n  if (typeof frequency === 'object' && 'trigger' in frequency) {\n    return frequency.trigger;\n  }\n\n  const parsed = Duration.isDuration(frequency)\n    ? frequency\n    : Duration.fromObject(frequency);\n\n  if (!parsed.isValid) {\n    throw new Error(\n      `Invalid duration, ${parsed.invalidReason}: ${parsed.invalidExplanation}`,\n    );\n  }\n\n  return parsed.toISO()!;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { DB_TASKS_TABLE, DbTasksRow } from '../database/tables';\nimport { sleep } from './util';\n\n/**\n * Makes sure to auto-expire and clean up things that time out or for other\n * reasons should not be left lingering.\n */\nexport class PluginTaskSchedulerJanitor {\n  private readonly knex: Knex;\n  private readonly waitBetweenRuns: Duration;\n  private readonly logger: LoggerService;\n\n  constructor(options: {\n    knex: Knex;\n    waitBetweenRuns: Duration;\n    logger: LoggerService;\n  }) {\n    this.knex = options.knex;\n    this.waitBetweenRuns = options.waitBetweenRuns;\n    this.logger = options.logger;\n  }\n\n  async start(abortSignal?: AbortSignal) {\n    while (!abortSignal?.aborted) {\n      try {\n        await this.runOnce();\n      } catch (e) {\n        this.logger.warn(`Error while performing janitorial tasks, ${e}`);\n      }\n\n      await sleep(this.waitBetweenRuns, abortSignal);\n    }\n  }\n\n  private async runOnce() {\n    const dbNull = this.knex.raw('null');\n    const configClient = this.knex.client.config.client;\n\n    let tasks: Array<{ id: string }>;\n    if (configClient.includes('sqlite3') || configClient.includes('mysql')) {\n      tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .select('id')\n        .where('current_run_expires_at', '<', this.knex.fn.now());\n      await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .whereIn(\n          'id',\n          tasks.map(t => t.id),\n        )\n        .update({\n          current_run_ticket: dbNull,\n          current_run_started_at: dbNull,\n          current_run_expires_at: dbNull,\n        });\n    } else {\n      tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .where('current_run_expires_at', '<', this.knex.fn.now())\n        .update({\n          current_run_ticket: dbNull,\n          current_run_started_at: dbNull,\n          current_run_expires_at: dbNull,\n        })\n        .returning(['id']);\n    }\n\n    // In rare cases, knex drivers may ignore \"returning\", and return the number\n    // of rows changed instead\n    if (typeof tasks === 'number') {\n      if (tasks > 0) {\n        this.logger.warn(`${tasks} tasks timed out and were lost`);\n      }\n    } else {\n      for (const { id } of tasks) {\n        this.logger.warn(`Task timed out and was lost: ${id}`);\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseService,\n  LoggerService,\n  SchedulerService,\n} from '@backstage/backend-plugin-api';\nimport { once } from 'lodash';\nimport { Duration } from 'luxon';\nimport { migrateBackendTasks } from '../database/migrateBackendTasks';\nimport { PluginTaskSchedulerImpl } from './PluginTaskSchedulerImpl';\nimport { PluginTaskSchedulerJanitor } from './PluginTaskSchedulerJanitor';\n\n/**\n * Default implementation of the task scheduler service.\n *\n * @public\n */\nexport class DefaultSchedulerService {\n  static create(options: {\n    database: DatabaseService;\n    logger: LoggerService;\n  }): SchedulerService {\n    const databaseFactory = once(async () => {\n      const knex = await options.database.getClient();\n\n      if (!options.database.migrations?.skip) {\n        await migrateBackendTasks(knex);\n      }\n\n      if (process.env.NODE_ENV !== 'test') {\n        const janitor = new PluginTaskSchedulerJanitor({\n          knex,\n          waitBetweenRuns: Duration.fromObject({ minutes: 1 }),\n          logger: options.logger,\n        });\n        janitor.start();\n      }\n\n      return knex;\n    });\n\n    return new PluginTaskSchedulerImpl(databaseFactory, options.logger);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { DefaultSchedulerService } from './lib/DefaultSchedulerService';\n\n/**\n * Scheduling of distributed background tasks.\n *\n * See {@link @backstage/code-plugin-api#SchedulerService}\n * and {@link https://backstage.io/docs/backend-system/core-services/scheduler | the service docs}\n * for more information.\n *\n * @public\n */\nexport const schedulerServiceFactory = createServiceFactory({\n  service: coreServices.scheduler,\n  deps: {\n    database: coreServices.database,\n    logger: coreServices.logger,\n  },\n  async factory({ database, logger }) {\n    return DefaultSchedulerService.create({ database, logger });\n  },\n});\n"],"names":["resolvePackagePath","InputError","Duration","ConflictError","CronTime","DateTime","z","NotFoundError","uuid","trace","metrics","once","createServiceFactory","coreServices"],"mappings":"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"}