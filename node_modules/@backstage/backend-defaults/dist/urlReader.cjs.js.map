{"version":3,"file":"urlReader.cjs.js","sources":["../src/entrypoints/urlReader/lib/ReadUrlResponseFactory.ts","../src/entrypoints/urlReader/lib/AzureUrlReader.ts","../src/entrypoints/urlReader/lib/util.ts","../src/entrypoints/urlReader/lib/BitbucketCloudUrlReader.ts","../src/entrypoints/urlReader/lib/BitbucketUrlReader.ts","../src/entrypoints/urlReader/lib/BitbucketServerUrlReader.ts","../src/entrypoints/urlReader/lib/GerritUrlReader.ts","../src/entrypoints/urlReader/lib/GithubUrlReader.ts","../src/entrypoints/urlReader/lib/GitlabUrlReader.ts","../src/entrypoints/urlReader/lib/GiteaUrlReader.ts","../src/entrypoints/urlReader/lib/HarnessUrlReader.ts","../src/entrypoints/urlReader/lib/AwsS3UrlReader.ts","../src/entrypoints/urlReader/lib/FetchUrlReader.ts","../src/entrypoints/urlReader/lib/UrlReaderPredicateMux.ts","../src/entrypoints/urlReader/lib/tree/util.ts","../src/entrypoints/urlReader/lib/tree/TarArchiveResponse.ts","../src/entrypoints/urlReader/lib/tree/ZipArchiveResponse.ts","../src/entrypoints/urlReader/lib/tree/ReadableArrayResponse.ts","../src/entrypoints/urlReader/lib/tree/ReadTreeResponseFactory.ts","../src/entrypoints/urlReader/lib/GoogleGcsUrlReader.ts","../src/entrypoints/urlReader/lib/AwsCodeCommitUrlReader.ts","../src/entrypoints/urlReader/lib/UrlReaders.ts","../src/entrypoints/urlReader/urlReaderServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError } from '@backstage/errors';\nimport { UrlReaderServiceReadUrlResponse } from '@backstage/backend-plugin-api';\nimport getRawBody from 'raw-body';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactoryFromStreamOptions } from './types';\n\n/**\n * Utility class for UrlReader implementations to create valid ReadUrlResponse\n * instances from common response primitives.\n *\n * @public\n */\nexport class ReadUrlResponseFactory {\n  /**\n   * Resolves a ReadUrlResponse from a Readable stream.\n   */\n  static async fromReadable(\n    stream: Readable,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // Reference to eventual buffer enables callers to call buffer() multiple\n    // times without consequence.\n    let buffer: Promise<Buffer>;\n\n    // Prevent \"stream is not readable\" errors from bubbling up.\n    const conflictError = new ConflictError(\n      'Cannot use buffer() and stream() from the same ReadUrlResponse',\n    );\n    let hasCalledStream = false;\n    let hasCalledBuffer = false;\n\n    return {\n      buffer: () => {\n        hasCalledBuffer = true;\n        if (hasCalledStream) throw conflictError;\n        if (buffer) return buffer;\n        buffer = getRawBody(stream);\n        return buffer;\n      },\n      stream: () => {\n        hasCalledStream = true;\n        if (hasCalledBuffer) throw conflictError;\n        return stream;\n      },\n      etag: options?.etag,\n      lastModifiedAt: options?.lastModifiedAt,\n    };\n  }\n\n  /**\n   * Resolves a ReadUrlResponse from an old-style NodeJS.ReadableStream.\n   */\n  static async fromNodeJSReadable(\n    oldStyleStream: NodeJS.ReadableStream,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const readable = Readable.from(oldStyleStream);\n    return ReadUrlResponseFactory.fromReadable(readable, options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getAzureCommitsUrl,\n  getAzureDownloadUrl,\n  getAzureFileFetchUrl,\n  AzureDevOpsCredentialsProvider,\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrations,\n  AzureIntegration,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for Azure repos.\n *\n * @public\n */\nexport class AzureUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialProvider =\n      DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n    return integrations.azure.list().map(integration => {\n      const reader = new AzureUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider: credentialProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: AzureIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: AzureDevOpsCredentialsProvider;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO: etag is not implemented yet.\n    const { signal } = options ?? {};\n\n    const builtUrl = getAzureFileFetchUrl(url);\n    let response: Response;\n    try {\n      const credentials = await this.deps.credentialsProvider.getCredentials({\n        url: builtUrl,\n      });\n      response = await fetch(builtUrl, {\n        headers: credentials?.headers,\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    // for private repos when PAT is not valid, Azure API returns a http status code 203 with sign in page html\n    if (response.ok && response.status !== 203) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body);\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, filter, signal } = options ?? {};\n\n    // TODO: Support filepath based reading tree feature like other providers\n\n    // Get latest commit SHA\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url: url,\n    });\n\n    const commitsAzureResponse = await fetch(getAzureCommitsUrl(url), {\n      headers: credentials?.headers,\n    });\n    if (!commitsAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${commitsAzureResponse.status} ${commitsAzureResponse.statusText}`;\n      if (commitsAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsAzureResponse.json()).value[0].commitId;\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveAzureResponse = await fetch(getAzureDownloadUrl(url), {\n      headers: {\n        ...credentials?.headers,\n        Accept: 'application/zip',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      ...(signal && { signal: signal as any }),\n    });\n    if (!archiveAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveAzureResponse.status} ${archiveAzureResponse.statusText}`;\n      if (archiveAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    // When downloading a zip archive from azure on a subpath we get an extra directory\n    // layer added at the top. With for example the file /a/b/c.txt and a download of\n    // /a/b, we'll see /b/c.txt in the zip archive. This picks out /b so that we can remove it.\n    let subpath;\n    const path = new URL(url).searchParams.get('path');\n    if (path) {\n      subpath = path.split('/').filter(Boolean).slice(-1)[0];\n    }\n\n    return await this.deps.treeResponseFactory.fromZipArchive({\n      stream: Readable.from(archiveAzureResponse.body),\n      etag: commitSha,\n      filter,\n      subpath,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const treeUrl = new URL(url);\n\n    const path = treeUrl.searchParams.get('path');\n    const matcher = path && new Minimatch(path.replace(/^\\/+/, ''));\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    treeUrl.searchParams.delete('path');\n\n    const tree = await this.readTree(treeUrl.toString(), {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: p => (matcher ? matcher.match(p) : true),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, credentials } = this.integration.config;\n    return `azure{host=${host},authed=${Boolean(\n      credentials !== undefined && credentials.length > 0,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function parseLastModified(value: string | null | undefined) {\n  if (!value) {\n    return undefined;\n  }\n\n  return new Date(value);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketCloudIntegration,\n  getBitbucketCloudDefaultBranch,\n  getBitbucketCloudDownloadUrl,\n  getBitbucketCloudFileFetchUrl,\n  getBitbucketCloudRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket Cloud.\n *\n * @public\n */\nexport class BitbucketCloudUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketCloud.list().map(integration => {\n      const reader = new BitbucketCloudUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketCloudIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, username, appPassword } = integration.config;\n\n    if (username && !appPassword) {\n      throw new Error(\n        `Bitbucket Cloud integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketCloudFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketCloudRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketCloudDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, username, appPassword } = this.integration.config;\n    const authed = Boolean(username && appPassword);\n    return `bitbucketCloud{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketCloudDefaultBranch(\n        url,\n        this.integration.config,\n      );\n    }\n\n    const commitsApiUrl = `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (\n      commits &&\n      commits.values &&\n      commits.values.length > 0 &&\n      commits.values[0].hash\n    ) {\n      return commits.values[0].hash.substring(0, 12);\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketIntegration,\n  getBitbucketDefaultBranch,\n  getBitbucketDownloadUrl,\n  getBitbucketFileFetchUrl,\n  getBitbucketRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket v1 and v2 APIs, such\n * as the one exposed by Bitbucket Cloud itself.\n *\n * @public\n * @deprecated in favor of BitbucketCloudUrlReader and BitbucketServerUrlReader\n */\nexport class BitbucketUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucket\n      .list()\n      .filter(\n        item =>\n          !integrations.bitbucketCloud.byHost(item.config.host) &&\n          !integrations.bitbucketServer.byHost(item.config.host),\n      )\n      .map(integration => {\n        const reader = new BitbucketUrlReader(integration, logger, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => url.host === integration.config.host;\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: BitbucketIntegration,\n    logger: LoggerService,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, token, username, appPassword } = integration.config;\n    const replacement =\n      host === 'bitbucket.org' ? 'bitbucketCloud' : 'bitbucketServer';\n    logger.warn(\n      `[Deprecated] Please migrate from \"integrations.bitbucket\" to \"integrations.${replacement}\".`,\n    );\n\n    if (!token && username && !appPassword) {\n      throw new Error(\n        `Bitbucket integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketFileFetchUrl(url, this.integration.config);\n    const requestOptions = getBitbucketRequestOptions(this.integration.config);\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveBitbucketResponse = await fetch(\n      downloadUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!archiveBitbucketResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveBitbucketResponse.status} ${archiveBitbucketResponse.statusText}`;\n      if (archiveBitbucketResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveBitbucketResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token, username, appPassword } = this.integration.config;\n    let authed = Boolean(token);\n    if (!authed) {\n      authed = Boolean(username && appPassword);\n    }\n    return `bitbucket{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { resource, name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketDefaultBranch(url, this.integration.config);\n    }\n\n    const isHosted = resource === 'bitbucket.org';\n    // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp222\n    const commitsApiUrl = isHosted\n      ? `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`\n      : `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/commits`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (isHosted) {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].hash\n      ) {\n        return commits.values[0].hash.substring(0, 12);\n      }\n    } else {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].id\n      ) {\n        return commits.values[0].id.substring(0, 12);\n      }\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketServerIntegration,\n  getBitbucketServerDownloadUrl,\n  getBitbucketServerFileFetchUrl,\n  getBitbucketServerRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket Server APIs.\n *\n * @public\n */\nexport class BitbucketServerUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketServer.list().map(integration => {\n      const reader = new BitbucketServerUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketServerIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketServerFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketServerRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketServerDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveResponse.body),\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    const authed = Boolean(token);\n    return `bitbucketServer{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref: branch } = parseGitUrl(url);\n\n    // If a branch is provided use that otherwise fall back to the default branch\n    const branchParameter = branch\n      ? `?filterText=${encodeURIComponent(branch)}`\n      : '/default';\n\n    // https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp211 (branches docs)\n    const branchListUrl = `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches${branchParameter}`;\n\n    const branchListResponse = await fetch(\n      branchListUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!branchListResponse.ok) {\n      const message = `Failed to retrieve branch list from ${branchListUrl}, ${branchListResponse.status} ${branchListResponse.statusText}`;\n      if (branchListResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const branchMatches = await branchListResponse.json();\n\n    if (branchMatches && branchMatches.size > 0) {\n      const exactBranchMatch = branchMatches.values.filter(\n        (branchDetails: { displayId: string }) =>\n          branchDetails.displayId === branch,\n      )[0];\n      return exactBranchMatch.latestCommit.substring(0, 12);\n    }\n\n    // Handle when no branch is provided using the default as the fallback\n    if (!branch && branchMatches) {\n      return branchMatches.latestCommit.substring(0, 12);\n    }\n\n    throw new Error(\n      `Failed to find Last Commit using ${\n        branch ? `branch \"${branch}\"` : 'default branch'\n      } in response from ${branchListUrl}`,\n    );\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { Base64Decode } from 'base64-stream';\nimport fetch, { Response } from 'node-fetch';\nimport { Readable } from 'stream';\nimport {\n  GerritIntegration,\n  ScmIntegrations,\n  buildGerritGitilesArchiveUrl,\n  getGerritBranchApiUrl,\n  getGerritFileContentsApiUrl,\n  getGerritRequestOptions,\n  parseGerritGitilesUrl,\n  parseGerritJsonResponse,\n} from '@backstage/integration';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files in Gerrit.\n *\n * @remarks\n * To be able to link to Git contents for Gerrit providers in a user friendly\n * way we are depending on that there is a Gitiles installation somewhere\n * that we can link to. It is perfectly possible to integrate Gerrit with\n * Backstage without Gitiles since all API calls goes directly to Gerrit.\n * However if Gitiles is configured, readTree will use it to fetch\n * an archive instead of cloning the repository.\n *\n * The \"host\" variable in the config is the Gerrit host. The address where\n * Gitiles is installed may be on the same host but it could be on a\n * separate host. For example a Gerrit instance could be hosted on\n * \"gerrit-review.company.com\" but the repos could be browsable on a separate\n * host, e.g. \"gerrit.company.com\" and the human readable URL would then\n * not point to the API host.\n *\n * @public\n */\nexport class GerritUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    if (!integrations.gerrit) {\n      return [];\n    }\n    return integrations.gerrit.list().map(integration => {\n      const reader = new GerritUrlReader(integration, { treeResponseFactory });\n      const predicate = (url: URL) => {\n        const gitilesUrl = new URL(integration.config.gitilesBaseUrl!);\n        // If gitilesUrl is not specified it will default to\n        // \"integration.config.host\".\n        return url.host === gitilesUrl.host;\n      };\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GerritIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const apiUrl = getGerritFileContentsApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read gerrit file ${url}, ${e}`);\n    }\n\n    if (response.ok) {\n      let responseBody: string;\n      return {\n        buffer: async () => {\n          if (responseBody === undefined) {\n            responseBody = await response.text();\n          }\n          return Buffer.from(responseBody, 'base64');\n        },\n        stream: () => {\n          const readable = Readable.from(response.body);\n          return readable.pipe(new Base64Decode());\n        },\n      };\n    }\n    if (response.status === 404) {\n      throw new NotFoundError(`File ${url} not found.`);\n    }\n    throw new Error(\n      `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n    );\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const apiUrl = getGerritBranchApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read branch state ${url}, ${e}`);\n    }\n\n    if (response.status === 404) {\n      throw new NotFoundError(`Not found: ${url}`);\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n      );\n    }\n    const branchInfo = (await parseGerritJsonResponse(response as any)) as {\n      revision: string;\n    };\n    if (options?.etag === branchInfo.revision) {\n      throw new NotModifiedError();\n    }\n\n    return this.readTreeFromGitiles(url, branchInfo.revision, options);\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GerritReader does not implement search');\n  }\n\n  toString() {\n    const { host, password } = this.integration.config;\n    return `gerrit{host=${host},authed=${Boolean(password)}}`;\n  }\n\n  private async readTreeFromGitiles(\n    url: string,\n    revision: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ) {\n    const { branch, filePath, project } = parseGerritGitilesUrl(\n      this.integration.config,\n      url,\n    );\n    const archiveUrl = buildGerritGitilesArchiveUrl(\n      this.integration.config,\n      project,\n      branch,\n      filePath,\n    );\n    const archiveResponse = await fetch(archiveUrl, {\n      ...getGerritRequestOptions(this.integration.config),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    if (archiveResponse.status === 404) {\n      throw new NotFoundError(`Not found: ${archiveUrl}`);\n    }\n\n    if (!archiveResponse.ok) {\n      throw new Error(\n        `${url} could not be read as ${archiveUrl}, ${archiveResponse.status} ${archiveResponse.statusText}`,\n      );\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      etag: revision,\n      filter: options?.filter,\n      stripFirstDirectory: false,\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceSearchResponseFile,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGithubFileFetchUrl,\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegration,\n  ScmIntegrations,\n  GithubCredentials,\n} from '@backstage/integration';\nimport { RestEndpointMethodTypes } from '@octokit/rest';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\nexport type GhRepoResponse =\n  RestEndpointMethodTypes['repos']['get']['response']['data'];\nexport type GhCombinedCommitStatusResponse =\n  RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['response']['data'];\nexport type GhTreeResponse =\n  RestEndpointMethodTypes['git']['getTree']['response']['data'];\nexport type GhBlobResponse =\n  RestEndpointMethodTypes['git']['getBlob']['response']['data'];\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files through the GitHub v3 APIs, such as\n * the one exposed by GitHub itself.\n *\n * @public\n */\nexport class GithubUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialsProvider =\n      DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n    return integrations.github.list().map(integration => {\n      const reader = new GithubUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GithubIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: GithubCredentialsProvider;\n    },\n  ) {\n    if (!integration.config.apiBaseUrl && !integration.config.rawBaseUrl) {\n      throw new Error(\n        `GitHub integration '${integration.title}' must configure an explicit apiBaseUrl or rawBaseUrl`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  private getCredentials = async (\n    url: string,\n    options?: { token?: string },\n  ): Promise<GithubCredentials> => {\n    if (options?.token) {\n      return {\n        headers: {\n          Authorization: `Bearer ${options.token}`,\n        },\n        type: 'token',\n        token: options.token,\n      };\n    }\n\n    return await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n  };\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const credentials = await this.getCredentials(url, options);\n\n    const ghUrl = getGithubFileFetchUrl(\n      url,\n      this.integration.config,\n      credentials,\n    );\n\n    const response = await this.fetchResponse(ghUrl, {\n      headers: {\n        ...credentials?.headers,\n        ...(options?.etag && { 'If-None-Match': options.etag }),\n        ...(options?.lastModifiedAfter && {\n          'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n        }),\n        Accept: 'application/vnd.github.v3.raw',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n      etag: response.headers.get('ETag') ?? undefined,\n      lastModifiedAt: parseLastModified(response.headers.get('Last-Modified')),\n    });\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    return this.doReadTree(\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      { headers, signal: options?.signal as any },\n      options,\n    );\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    const files = await this.doSearch(\n      url,\n      repoDetails.repo.trees_url,\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      { headers, signal: options?.signal as any },\n    );\n\n    return { files, etag: commitSha };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `github{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async doReadTree(\n    archiveUrl: string,\n    sha: string,\n    subpath: string,\n    init: RequestInit,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // archive_url looks like \"https://api.github.com/repos/owner/repo/{archive_format}{/ref}\"\n    const archive = await this.fetchResponse(\n      archiveUrl\n        .replace('{archive_format}', 'tarball')\n        .replace('{/ref}', `/${sha}`),\n      init,\n    );\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      // TODO(Rugvip): Underlying implementation of fetch will be node-fetch, we probably want\n      //               to stick to using that in exclusively backend code.\n      stream: Readable.from(archive.body),\n      subpath,\n      etag: sha,\n      filter: options?.filter,\n    });\n  }\n\n  private async doSearch(\n    url: string,\n    treesUrl: string,\n    archiveUrl: string,\n    sha: string,\n    query: string,\n    init: RequestInit,\n  ): Promise<UrlReaderServiceSearchResponseFile[]> {\n    function pathToUrl(path: string): string {\n      // TODO(freben): Use the integration package facility for this instead\n      // pathname starts as /backstage/backstage/blob/master/<path>\n      const updated = new URL(url);\n      const base = updated.pathname.split('/').slice(1, 5).join('/');\n      updated.pathname = `${base}/${path}`;\n      return updated.toString();\n    }\n\n    const matcher = new Minimatch(query.replace(/^\\/+/, ''));\n\n    // trees_url looks like \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\"\n    const recursiveTree: GhTreeResponse = await this.fetchJson(\n      treesUrl.replace('{/sha}', `/${sha}?recursive=true`),\n      init,\n    );\n\n    // The simple case is that we got the entire tree in a single operation.\n    if (!recursiveTree.truncated) {\n      const matching = recursiveTree.tree.filter(\n        item =>\n          item.type === 'blob' &&\n          item.path &&\n          item.url &&\n          matcher.match(item.path),\n      );\n\n      return matching.map(item => ({\n        url: pathToUrl(item.path!),\n        content: async () => {\n          const blob: GhBlobResponse = await this.fetchJson(item.url!, init);\n          return Buffer.from(blob.content, 'base64');\n        },\n      }));\n    }\n\n    // For larger repos, we leverage readTree and filter through that instead\n    const tree = await this.doReadTree(archiveUrl, sha, '', init, {\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return files.map(file => ({\n      url: pathToUrl(file.path),\n      content: file.content,\n      lastModifiedAt: file.lastModifiedAt,\n    }));\n  }\n\n  private async getRepoDetails(url: string): Promise<{\n    commitSha: string;\n    repo: {\n      archive_url: string;\n      trees_url: string;\n    };\n  }> {\n    const parsed = parseGitUrl(url);\n    const { ref, full_name } = parsed;\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n    const { headers } = credentials;\n\n    const commitStatus: GhCombinedCommitStatusResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${full_name}/commits/${\n        ref || (await this.getDefaultBranch(full_name, credentials))\n      }/status?per_page=0`,\n      { headers },\n    );\n\n    return {\n      commitSha: commitStatus.sha,\n      repo: commitStatus.repository,\n    };\n  }\n\n  private async getDefaultBranch(\n    repoFullName: string,\n    credentials: GithubCredentials,\n  ): Promise<string> {\n    const repo: GhRepoResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${repoFullName}`,\n      { headers: credentials.headers },\n    );\n\n    return repo.default_branch;\n  }\n\n  private async fetchResponse(\n    url: string | URL,\n    init: RequestInit,\n  ): Promise<Response> {\n    const urlAsString = url.toString();\n    const response = await fetch(urlAsString, init);\n\n    if (!response.ok) {\n      let message = `Request failed for ${urlAsString}, ${response.status} ${response.statusText}`;\n\n      if (response.status === 304) {\n        throw new NotModifiedError();\n      }\n\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n\n      // GitHub returns a 403 response with a couple of headers indicating rate\n      // limit status. See more in the GitHub docs:\n      // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n      if (this.integration.parseRateLimitInfo(response).isRateLimited) {\n        message += ' (rate limit exceeded)';\n      }\n\n      throw new Error(message);\n    }\n\n    return response;\n  }\n\n  private async fetchJson(url: string | URL, init: RequestInit): Promise<any> {\n    const response = await this.fetchResponse(url, init);\n    return await response.json();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  GitLabIntegration,\n  ScmIntegrations,\n  getGitLabFileFetchUrl,\n  getGitLabIntegrationRelativePath,\n  getGitLabRequestOptions,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd, trimStart } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport fetch, { Response } from 'node-fetch';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on GitLab.\n *\n * @public\n */\nexport class GitlabUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.gitlab.list().map(integration => {\n      const reader = new GitlabUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GitLabIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal, token } = options ?? {};\n    const builtUrl = await this.getGitlabFetchUrl(url);\n\n    let response: Response;\n    try {\n      response = await fetch(builtUrl, {\n        headers: {\n          ...getGitLabRequestOptions(this.integration.config, token).headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, signal, token } = options ?? {};\n    const { ref, full_name, filepath } = parseGitUrl(url);\n\n    let repoFullName = full_name;\n\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n\n    // Considering self hosted gitlab with relative\n    // assuming '/gitlab' is the relative path\n    // from: /gitlab/repo/project\n    // to: repo/project\n    if (relativePath) {\n      const rectifiedRelativePath = `${trimStart(relativePath, '/')}/`;\n      repoFullName = full_name.replace(rectifiedRelativePath, '');\n    }\n\n    // Use GitLab API to get the default branch\n    // encodeURIComponent is required for GitLab API\n    // https://docs.gitlab.com/ee/api/README.html#namespaced-path-encoding\n    const projectGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}`,\n      ).toString(),\n      getGitLabRequestOptions(this.integration.config, token),\n    );\n    if (!projectGitlabResponse.ok) {\n      const msg = `Failed to read tree from ${url}, ${projectGitlabResponse.status} ${projectGitlabResponse.statusText}`;\n      if (projectGitlabResponse.status === 404) {\n        throw new NotFoundError(msg);\n      }\n      throw new Error(msg);\n    }\n    const projectGitlabResponseJson = await projectGitlabResponse.json();\n\n    // ref is an empty string if no branch is set in provided url to readTree.\n    const branch = ref || projectGitlabResponseJson.default_branch;\n\n    // Fetch the latest commit that modifies the filepath in the provided or default branch\n    // to compare against the provided sha.\n    const commitsReqParams = new URLSearchParams();\n    commitsReqParams.set('ref_name', branch);\n    if (!!filepath) {\n      commitsReqParams.set('path', filepath);\n    }\n    const commitsGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}/repository/commits?${commitsReqParams.toString()}`,\n      ).toString(),\n      {\n        ...getGitLabRequestOptions(this.integration.config, token),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!commitsGitlabResponse.ok) {\n      const message = `Failed to read tree (branch) from ${url}, ${commitsGitlabResponse.status} ${commitsGitlabResponse.statusText}`;\n      if (commitsGitlabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsGitlabResponse.json())[0]?.id ?? '';\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveReqParams = new URLSearchParams();\n    archiveReqParams.set('sha', branch);\n    if (!!filepath) {\n      archiveReqParams.set('path', filepath);\n    }\n    // https://docs.gitlab.com/ee/api/repositories.html#get-file-archive\n    const archiveGitLabResponse = await fetch(\n      `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n        repoFullName,\n      )}/repository/archive?${archiveReqParams.toString()}`,\n      {\n        ...getGitLabRequestOptions(this.integration.config, token),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!archiveGitLabResponse.ok) {\n      const message = `Failed to read tree (archive) from ${url}, ${archiveGitLabResponse.status} ${archiveGitLabResponse.statusText}`;\n      if (archiveGitLabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveGitLabResponse.body),\n      subpath: filepath,\n      etag: commitSha,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const staticPart = this.getStaticPart(filepath);\n    const matcher = new Minimatch(filepath);\n    const treeUrl = trimEnd(url.replace(filepath, staticPart), `/`);\n    const pathPrefix = staticPart ? `${staticPart}/` : '';\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: path => matcher.match(`${pathPrefix}${path}`),\n    });\n\n    const files = await tree.files();\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${pathPrefix}${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  /**\n   * This function splits the input globPattern string into segments using the  path separator /. It then iterates over\n   * the segments from the end of the array towards the beginning, checking if the concatenated string up to that\n   * segment matches the original globPattern using the minimatch function. If a match is found, it continues iterating.\n   * If no match is found, it returns the concatenated string up to the current segment, which is the static part of the\n   * glob pattern.\n   *\n   * E.g. `catalog/foo/*.yaml` will return `catalog/foo`.\n   *\n   * @param globPattern the glob pattern\n   * @private\n   */\n  private getStaticPart(globPattern: string) {\n    const segments = globPattern.split('/');\n    let i = segments.length;\n    while (\n      i > 0 &&\n      new Minimatch(segments.slice(0, i).join('/')).match(globPattern)\n    ) {\n      i--;\n    }\n    return segments.slice(0, i).join('/');\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `gitlab{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async getGitlabFetchUrl(target: string): Promise<string> {\n    // If the target is for a job artifact then go down that path\n    const targetUrl = new URL(target);\n    if (targetUrl.pathname.includes('/-/jobs/artifacts/')) {\n      return this.getGitlabArtifactFetchUrl(targetUrl).then(value =>\n        value.toString(),\n      );\n    }\n    // Default to the old behavior of assuming the url is for a file\n    return getGitLabFileFetchUrl(target, this.integration.config);\n  }\n\n  // convert urls of the form:\n  //    https://example.com/<namespace>/<project>/-/jobs/artifacts/<ref>/raw/<path_to_file>?job=<job_name>\n  // to urls of the form:\n  //    https://example.com/api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path?job=<job_name>\n  private async getGitlabArtifactFetchUrl(target: URL): Promise<URL> {\n    if (!target.pathname.includes('/-/jobs/artifacts/')) {\n      throw new Error('Unable to process url as an GitLab artifact');\n    }\n    try {\n      const [namespaceAndProject, ref] =\n        target.pathname.split('/-/jobs/artifacts/');\n      const projectPath = new URL(target);\n      projectPath.pathname = namespaceAndProject;\n      const projectId = await this.resolveProjectToId(projectPath);\n      const relativePath = getGitLabIntegrationRelativePath(\n        this.integration.config,\n      );\n      const newUrl = new URL(target);\n      newUrl.pathname = `${relativePath}/api/v4/projects/${projectId}/jobs/artifacts/${ref}`;\n      return newUrl;\n    } catch (e) {\n      throw new Error(\n        `Unable to translate GitLab artifact URL: ${target}, ${e}`,\n      );\n    }\n  }\n\n  private async resolveProjectToId(pathToProject: URL): Promise<number> {\n    let project = pathToProject.pathname;\n    // Check relative path exist and remove it if so\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n    if (relativePath) {\n      project = project.replace(relativePath, '');\n    }\n    // Trim an initial / if it exists\n    project = project.replace(/^\\//, '');\n    const result = await fetch(\n      `${\n        pathToProject.origin\n      }${relativePath}/api/v4/projects/${encodeURIComponent(project)}`,\n      getGitLabRequestOptions(this.integration.config),\n    );\n    const data = await result.json();\n    if (!result.ok) {\n      throw new Error(`Gitlab error: ${data.error}, ${data.error_description}`);\n    }\n    return Number(data.id);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGiteaFileContentsUrl,\n  getGiteaArchiveUrl,\n  getGiteaLatestCommitUrl,\n  parseGiteaUrl,\n  getGiteaRequestOptions,\n  GiteaIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport fetch, { Response } from 'node-fetch';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Gitea v1 api.\n *\n * @public\n */\nexport class GiteaUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .gitea.list()\n      .map(integration => {\n        const reader = new GiteaUrlReader(integration, { treeResponseFactory });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: GiteaIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getGiteaFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Gitea returns an object with the file contents encoded, not the file itself\n      const { encoding, content } = await response.json();\n\n      if (encoding === 'base64') {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(Buffer.from(content, 'base64')),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n            lastModifiedAt: parseLastModified(\n              response.headers.get('Last-Modified'),\n            ),\n          },\n        );\n      }\n\n      throw new Error(`Unknown encoding: ${encoding}`);\n    }\n\n    const message = `${url} could not be read as ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getGiteaArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseGiteaUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(response.body),\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GiteaUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `gitea{host=${host},authed=${Boolean(\n      this.integration.config.password,\n    )}}`;\n  }\n\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getGiteaLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getGiteaRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).sha;\n  }\n}\n","/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceReadTreeOptions,\n} from '@backstage/backend-plugin-api';\nimport {\n  getHarnessRequestOptions,\n  getHarnessFileContentsUrl,\n  HarnessIntegration,\n  ScmIntegrations,\n  getHarnessLatestCommitUrl,\n  getHarnessArchiveUrl,\n  parseHarnessUrl,\n} from '@backstage/integration';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport fetch, { Response } from 'node-fetch';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Harness code v1 api.\n *\n *\n * @public\n */\nexport class HarnessUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .harness.list()\n      .map(integration => {\n        const reader = new HarnessUrlReader(integration, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: HarnessIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getHarnessFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Harness Code returns the raw content object\n      const jsonResponse = { data: response.body };\n      if (jsonResponse) {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(jsonResponse.data),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n          },\n        );\n      }\n\n      throw new Error(`Unknown json: ${jsonResponse}`);\n    }\n\n    const message = `${url} x ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getHarnessArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseHarnessUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromZipArchive({\n      stream: Readable.from(response.body),\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('HarnessUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `harness{host=${host},authed=${Boolean(\n      this.integration.config.token || this.integration.config.apiKey,\n    )}}`;\n  }\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getHarnessLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getHarnessRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).latest_commit.sha;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport {\n  AwsCredentialsManager,\n  DefaultAwsCredentialsManager,\n} from '@backstage/integration-aws-node';\nimport {\n  AwsS3Integration,\n  ScmIntegrations,\n  AwsS3IntegrationConfig,\n} from '@backstage/integration';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { fromTemporaryCredentials } from '@aws-sdk/credential-providers';\nimport { AwsCredentialIdentityProvider } from '@aws-sdk/types';\nimport {\n  S3Client,\n  ListObjectsV2Command,\n  ListObjectsV2CommandOutput,\n  GetObjectCommand,\n  GetObjectCommandInput,\n} from '@aws-sdk/client-s3';\nimport { AbortController } from '@aws-sdk/abort-controller';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { Readable } from 'stream';\nimport { relative } from 'path/posix';\n\nexport const DEFAULT_REGION = 'us-east-1';\n\n/**\n * Path style URLs: https://s3.(region).amazonaws.com/(bucket)/(key)\n * The region can also be on the old form: https://s3-(region).amazonaws.com/(bucket)/(key)\n * Virtual hosted style URLs: https://(bucket).s3.(region).amazonaws.com/(key)\n * See https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access\n */\nexport function parseUrl(\n  url: string,\n  config: AwsS3IntegrationConfig,\n): { path: string; bucket: string; region: string } {\n  const parsedUrl = new URL(url);\n\n  /**\n   * Removes the leading '/' from the pathname to be processed\n   * as a parameter by AWS S3 SDK getObject method.\n   */\n  const pathname = parsedUrl.pathname.substring(1);\n  const host = parsedUrl.host;\n\n  // Treat Amazon hosted separately because it has special region logic\n  if (config.host === 'amazonaws.com' || config.host === 'amazonaws.com.cn') {\n    const match = host.match(\n      /^(?:([a-z0-9.-]+)\\.)?s3(?:[.-]([a-z0-9-]+))?\\.amazonaws\\.com(\\.cn)?$/,\n    );\n    if (!match) {\n      throw new Error(`Invalid AWS S3 URL ${url}`);\n    }\n\n    const [, hostBucket, hostRegion] = match;\n\n    if (config.s3ForcePathStyle || !hostBucket) {\n      const slashIndex = pathname.indexOf('/');\n      if (slashIndex < 0) {\n        throw new Error(\n          `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n        );\n      }\n\n      return {\n        path: pathname.substring(slashIndex + 1),\n        bucket: pathname.substring(0, slashIndex),\n        region: hostRegion ?? DEFAULT_REGION,\n      };\n    }\n\n    return {\n      path: pathname,\n      bucket: hostBucket,\n      region: hostRegion ?? DEFAULT_REGION,\n    };\n  }\n\n  const usePathStyle =\n    config.s3ForcePathStyle || host.length === config.host.length;\n\n  if (usePathStyle) {\n    const slashIndex = pathname.indexOf('/');\n    if (slashIndex < 0) {\n      throw new Error(\n        `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n      );\n    }\n\n    return {\n      path: pathname.substring(slashIndex + 1),\n      bucket: pathname.substring(0, slashIndex),\n      region: DEFAULT_REGION,\n    };\n  }\n\n  return {\n    path: pathname,\n    bucket: host.substring(0, host.length - config.host.length - 1),\n    region: DEFAULT_REGION,\n  };\n}\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for AWS S3 buckets.\n *\n * @public\n */\nexport class AwsS3UrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credsManager = DefaultAwsCredentialsManager.fromConfig(config);\n\n    return integrations.awsS3.list().map(integration => {\n      const reader = new AwsS3UrlReader(credsManager, integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) =>\n        url.host.endsWith(integration.config.host);\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly credsManager: AwsCredentialsManager,\n    private readonly integration: AwsS3Integration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  /**\n   * If accessKeyId and secretAccessKey are missing, the standard credentials provider chain will be used:\n   * https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n   */\n  private static buildStaticCredentials(\n    accessKeyId: string,\n    secretAccessKey: string,\n  ): AwsCredentialIdentityProvider {\n    return async () => {\n      return {\n        accessKeyId,\n        secretAccessKey,\n      };\n    };\n  }\n\n  private static async buildCredentials(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration?: AwsS3Integration,\n  ): Promise<AwsCredentialIdentityProvider> {\n    // Fall back to the default credential chain if neither account ID\n    // nor explicit credentials are provided\n    if (!integration) {\n      return (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n    }\n\n    const accessKeyId = integration.config.accessKeyId;\n    const secretAccessKey = integration.config.secretAccessKey;\n    let explicitCredentials: AwsCredentialIdentityProvider;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = AwsS3UrlReader.buildStaticCredentials(\n        accessKeyId,\n        secretAccessKey,\n      );\n    } else {\n      explicitCredentials = (await credsManager.getCredentialProvider())\n        .sdkCredentialProvider;\n    }\n\n    const roleArn = integration.config.roleArn;\n    if (roleArn) {\n      return fromTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-s3-url-reader',\n          RoleArn: roleArn,\n          ExternalId: integration.config.externalId,\n        },\n        clientConfig: { region },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  private async buildS3Client(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration: AwsS3Integration,\n  ): Promise<S3Client> {\n    const credentials = await AwsS3UrlReader.buildCredentials(\n      credsManager,\n      region,\n      integration,\n    );\n\n    const s3 = new S3Client({\n      customUserAgent: 'backstage-aws-s3-url-reader',\n      region: region,\n      credentials: credentials,\n      endpoint: integration.config.endpoint,\n      forcePathStyle: integration.config.s3ForcePathStyle,\n    });\n    return s3;\n  }\n\n  private async retrieveS3ObjectData(stream: Readable): Promise<Readable> {\n    return new Promise((resolve, reject) => {\n      try {\n        const chunks: any[] = [];\n        stream.on('data', chunk => chunks.push(chunk));\n        stream.on('error', (e: Error) =>\n          reject(new ForwardedError('Unable to read stream', e)),\n        );\n        stream.on('end', () => resolve(Readable.from(Buffer.concat(chunks))));\n      } catch (e) {\n        throw new ForwardedError('Unable to parse the response data', e);\n      }\n    });\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter } = options ?? {};\n\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      const s3Client = await this.buildS3Client(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n\n      const params: GetObjectCommandInput = {\n        Bucket: bucket,\n        Key: path,\n        ...(etag && { IfNoneMatch: etag }),\n        ...(lastModifiedAfter && {\n          IfModifiedSince: lastModifiedAfter,\n        }),\n      };\n\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n      const getObjectCommand = new GetObjectCommand(params);\n      const response = await s3Client.send(getObjectCommand, {\n        abortSignal: abortController.signal,\n      });\n\n      const s3ObjectData = await this.retrieveS3ObjectData(\n        response.Body as Readable,\n      );\n\n      return ReadUrlResponseFactory.fromReadable(s3ObjectData, {\n        etag: response.ETag,\n        lastModifiedAt: response.LastModified,\n      });\n    } catch (e) {\n      if (e.$metadata && e.$metadata.httpStatusCode === 304) {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError('Could not retrieve file from S3', e);\n    }\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      const s3Client = await this.buildS3Client(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n      const allObjects: String[] = [];\n      const responses = [];\n      let continuationToken: string | undefined;\n      let output: ListObjectsV2CommandOutput;\n      do {\n        const listObjectsV2Command = new ListObjectsV2Command({\n          Bucket: bucket,\n          ContinuationToken: continuationToken,\n          Prefix: path,\n        });\n        options?.signal?.addEventListener('abort', () =>\n          abortController.abort(),\n        );\n        output = await s3Client.send(listObjectsV2Command, {\n          abortSignal: abortController.signal,\n        });\n        if (output.Contents) {\n          output.Contents.forEach(contents => {\n            allObjects.push(contents.Key!);\n          });\n        }\n        continuationToken = output.NextContinuationToken;\n      } while (continuationToken);\n\n      for (let i = 0; i < allObjects.length; i++) {\n        const getObjectCommand = new GetObjectCommand({\n          Bucket: bucket,\n          Key: String(allObjects[i]),\n        });\n        const response = await s3Client.send(getObjectCommand);\n        const s3ObjectData = await this.retrieveS3ObjectData(\n          response.Body as Readable,\n        );\n\n        responses.push({\n          data: s3ObjectData,\n          path: relative(path, String(allObjects[i])),\n          lastModifiedAt: response?.LastModified ?? undefined,\n        });\n      }\n\n      return await this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      throw new ForwardedError('Could not retrieve file tree from S3', e);\n    }\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('AwsS3Reader does not implement search');\n  }\n\n  toString() {\n    const secretAccessKey = this.integration.config.secretAccessKey;\n    return `awsS3{host=${this.integration.config.host},authed=${Boolean(\n      secretAccessKey,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport fetch, { Response } from 'node-fetch';\nimport { ReaderFactory } from './types';\nimport path from 'path';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\nconst isInRange = (num: number, [start, end]: [number, number]) => {\n  return num >= start && num <= end;\n};\n\nconst parsePortRange = (port: string): [number, number] => {\n  const isRange = port.includes('-');\n  if (isRange) {\n    const range = port\n      .split('-')\n      .map(v => parseInt(v, 10))\n      .filter(Boolean) as [number, number];\n    if (range.length !== 2) throw new Error(`Port range is not valid: ${port}`);\n    const [start, end] = range;\n    if (start <= 0 || end <= 0 || start > end)\n      throw new Error(`Port range is not valid: [${start}, ${end}]`);\n    return range;\n  }\n  const parsedPort = parseInt(port, 10);\n  return [parsedPort, parsedPort];\n};\n\nconst parsePortPredicate = (port: string | undefined) => {\n  if (port) {\n    const range = parsePortRange(port);\n    return (url: URL) => {\n      if (url.port) return isInRange(parseInt(url.port, 10), range);\n\n      if (url.protocol === 'http:') return isInRange(80, range);\n      if (url.protocol === 'https:') return isInRange(443, range);\n      return false;\n    };\n  }\n  return (url: URL) => !url.port;\n};\n\n/**\n * A {@link @backstage/backend-plugin-api#UrlReaderService} that does a plain fetch of the URL.\n *\n * @public\n */\nexport class FetchUrlReader implements UrlReaderService {\n  /**\n   * The factory creates a single reader that will be used for reading any URL that's listed\n   * in configuration at `backend.reading.allow`. The allow list contains a list of objects describing\n   * targets to allow, containing the following fields:\n   *\n   * `host`:\n   *   Either full hostnames to match, or subdomain wildcard matchers with a leading '*'.\n   *   For example 'example.com' and '*.example.com' are valid values, 'prod.*.example.com' is not.\n   *\n   * `paths`:\n   *   An optional list of paths which are allowed. If the list is omitted all paths are allowed.\n   */\n  static factory: ReaderFactory = ({ config }) => {\n    const predicates =\n      config\n        .getOptionalConfigArray('backend.reading.allow')\n        ?.map(allowConfig => {\n          const paths = allowConfig.getOptionalStringArray('paths');\n          const checkPath = paths\n            ? (url: URL) => {\n                const targetPath = path.posix.normalize(url.pathname);\n                return paths.some(allowedPath =>\n                  targetPath.startsWith(allowedPath),\n                );\n              }\n            : (_url: URL) => true;\n          const host = allowConfig.getString('host');\n          const [hostname, port] = host.split(':');\n\n          const checkPort = parsePortPredicate(port);\n\n          if (hostname.startsWith('*.')) {\n            const suffix = hostname.slice(1);\n            return (url: URL) =>\n              url.hostname.endsWith(suffix) && checkPath(url) && checkPort(url);\n          }\n          return (url: URL) =>\n            url.hostname === hostname && checkPath(url) && checkPort(url);\n        }) ?? [];\n\n    const reader = new FetchUrlReader();\n    const predicate = (url: URL) => predicates.some(p => p(url));\n    return [{ reader, predicate }];\n  };\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        headers: {\n          ...(options?.etag && { 'If-None-Match': options.etag }),\n          ...(options?.lastModifiedAfter && {\n            'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n          }),\n          ...(options?.token && { Authorization: `Bearer ${options.token}` }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `could not read ${url}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('FetchUrlReader does not implement readTree');\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('FetchUrlReader does not implement search');\n  }\n\n  toString() {\n    return 'fetch{}';\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport { NotAllowedError } from '@backstage/errors';\nimport { UrlReaderPredicateTuple } from './types';\n\nfunction notAllowedMessage(url: string) {\n  return (\n    `Reading from '${url}' is not allowed. ` +\n    `You may need to configure an integration for the target host, or add it ` +\n    `to the configured list of allowed hosts at 'backend.reading.allow'`\n  );\n}\n\n/**\n * A UrlReaderService implementation that selects from a set of readers\n * based on a predicate tied to each reader.\n */\nexport class UrlReaderPredicateMux implements UrlReaderService {\n  private readonly readers: UrlReaderPredicateTuple[] = [];\n\n  register(tuple: UrlReaderPredicateTuple): void {\n    this.readers.push(tuple);\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return reader.readUrl(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.readTree(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.search(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  toString() {\n    return `predicateMux{readers=${this.readers.map(t => t.reader).join(',')}`;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable, pipeline as pipelineCb } from 'stream';\nimport { promisify } from 'util';\nimport concatStream from 'concat-stream';\n\nconst pipeline = promisify(pipelineCb);\n\n// Matches a directory name + one `/` at the start of any string,\n// containing any character except `/` one or more times, and ending with a `/`\n// e.g. Will match `dirA/` in `dirA/dirB/file.ext`\nconst directoryNameRegex = /^[^\\/]+\\//;\n// Removes the first segment of a forward-slash-separated path\nexport function stripFirstDirectoryFromPath(path: string): string {\n  return path.replace(directoryNameRegex, '');\n}\n\n// Collect the stream into a buffer and return\nexport const streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await pipeline(stream, concatStream(resolve));\n    } catch (ex) {\n      reject(ex);\n    }\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport concatStream from 'concat-stream';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport tar, { Parse, ParseStream, ReadEntry } from 'tar';\nimport { promisify } from 'util';\nimport { stripFirstDirectoryFromPath } from './util';\n\n// Tar types for `Parse` is not a proper constructor, but it should be\nconst TarParseStream = Parse as unknown as { new (): ParseStream };\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a tar archive stream into a tree response reader.\n */\nexport class TarArchiveResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n    private readonly stripFirstDirectory: boolean = true,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `TarArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n    const parser = new TarParseStream();\n\n    parser.on('entry', (entry: ReadEntry & Readable) => {\n      if (entry.type === 'Directory') {\n        entry.resume();\n        return;\n      }\n\n      // File path relative to the root extracted directory. Will remove the\n      // top level dir name from the path since its name is hard to predetermine.\n      const relativePath = this.stripFirstDirectory\n        ? stripFirstDirectoryFromPath(entry.path)\n        : entry.path;\n\n      if (this.subPath) {\n        if (!relativePath.startsWith(this.subPath)) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const path = relativePath.slice(this.subPath.length);\n      if (this.filter) {\n        if (!this.filter(path, { size: entry.remain })) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const content = new Promise<Buffer>(async resolve => {\n        await pipeline(entry, concatStream(resolve));\n      });\n\n      files.push({\n        path,\n        content: () => content,\n      });\n\n      entry.resume();\n    });\n\n    await pipeline(this.stream, parser);\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    if (!this.subPath) {\n      this.onlyOnce();\n\n      return this.stream;\n    }\n\n    // TODO(Rugvip): method for repacking a tar with a subpath is to simply extract into a\n    //               tmp dir and recreate the archive. Would be nicer to stream things instead.\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    // Equivalent of tar --strip-components=N\n    // When no subPath is given, remove just 1 top level directory\n    let strip = this.subPath ? this.subPath.split('/').length : 1;\n    if (!this.stripFirstDirectory) {\n      strip--;\n    }\n\n    let filterError: Error | undefined = undefined;\n    await pipeline(\n      this.stream,\n      tar.extract({\n        strip,\n        cwd: dir,\n        filter: (path, stat) => {\n          // Filter errors will short-circuit the rest of the filtering and then throw\n          if (filterError) {\n            return false;\n          }\n\n          // File path relative to the root extracted directory. Will remove the\n          // top level dir name from the path since its name is hard to predetermine.\n          const relativePath = this.stripFirstDirectory\n            ? stripFirstDirectoryFromPath(path)\n            : path;\n          if (this.subPath && !relativePath.startsWith(this.subPath)) {\n            return false;\n          }\n          if (this.filter) {\n            const innerPath = path.split('/').slice(strip).join('/');\n            try {\n              return this.filter(innerPath, { size: stat.size });\n            } catch (error) {\n              filterError = error;\n              return false;\n            }\n          }\n          return true;\n        },\n      }),\n    );\n\n    if (filterError) {\n      // If the dir was provided we don't want to remove it, but if it wasn't it means\n      // we created a temporary directory and we should remove it.\n      if (!options?.targetDir) {\n        await fs.remove(dir).catch(() => {});\n      }\n      throw filterError;\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport archiver from 'archiver';\nimport yauzl, { Entry } from 'yauzl';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { Readable } from 'stream';\nimport { streamToBuffer } from './util';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\n\n/**\n * Wraps a zip archive stream into a tree response reader.\n */\nexport class ZipArchiveResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `ZipArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  // File path relative to the root extracted directory or a sub directory if subpath is set.\n  private getInnerPath(path: string): string {\n    return path.slice(this.subPath.length);\n  }\n\n  private shouldBeIncluded(entry: Entry): boolean {\n    if (this.subPath) {\n      if (!entry.fileName.startsWith(this.subPath)) {\n        return false;\n      }\n    }\n    if (this.filter) {\n      return this.filter(this.getInnerPath(entry.fileName), {\n        size: entry.uncompressedSize,\n      });\n    }\n    return true;\n  }\n\n  private async streamToTemporaryFile(\n    stream: Readable,\n  ): Promise<{ fileName: string; cleanup: () => Promise<void> }> {\n    const tmpDir = await fs.mkdtemp(\n      platformPath.join(this.workDir, 'backstage-tmp'),\n    );\n    const tmpFile = platformPath.join(tmpDir, 'tmp.zip');\n\n    const writeStream = fs.createWriteStream(tmpFile);\n\n    return new Promise((resolve, reject) => {\n      writeStream.on('error', reject);\n      writeStream.on('finish', () => {\n        writeStream.end();\n        resolve({\n          fileName: tmpFile,\n          cleanup: () => fs.rm(tmpDir, { recursive: true }),\n        });\n      });\n      stream.pipe(writeStream);\n    });\n  }\n\n  private forEveryZipEntry(\n    zip: string,\n    callback: (entry: Entry, content: Readable) => Promise<void>,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      yauzl.open(zip, { lazyEntries: true }, (err, zipfile) => {\n        if (err || !zipfile) {\n          reject(err || new Error(`Failed to open zip file ${zip}`));\n          return;\n        }\n\n        zipfile.on('entry', async (entry: Entry) => {\n          // Check that the file is not a directory, and that is matches the filter.\n          if (!entry.fileName.endsWith('/') && this.shouldBeIncluded(entry)) {\n            zipfile.openReadStream(entry, async (openErr, readStream) => {\n              if (openErr || !readStream) {\n                reject(\n                  openErr ||\n                    new Error(`Failed to open zip entry ${entry.fileName}`),\n                );\n                return;\n              }\n\n              await callback(entry, readStream);\n              zipfile.readEntry();\n            });\n          } else {\n            zipfile.readEntry();\n          }\n        });\n        zipfile.once('end', () => resolve());\n        zipfile.on('error', e => reject(e));\n        zipfile.readEntry();\n      });\n    });\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      files.push({\n        path: this.getInnerPath(entry.fileName),\n        content: async () => await streamToBuffer(content),\n        lastModifiedAt: entry.lastModFileTime\n          ? new Date(entry.lastModFileTime)\n          : undefined,\n      });\n    });\n\n    await temporary.cleanup();\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    this.onlyOnce();\n\n    if (!this.subPath) {\n      return this.stream;\n    }\n\n    const archive = archiver('zip');\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      archive.append(await streamToBuffer(content), {\n        name: this.getInnerPath(entry.fileName),\n      });\n    });\n\n    archive.finalize();\n\n    await temporary.cleanup();\n\n    return archive;\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      const entryPath = this.getInnerPath(entry.fileName);\n      const dirname = platformPath.dirname(entryPath);\n\n      if (dirname) {\n        await fs.mkdirp(resolveSafeChildPath(dir, dirname));\n      }\n      return new Promise(async (resolve, reject) => {\n        const file = fs.createWriteStream(resolveSafeChildPath(dir, entryPath));\n        file.on('finish', resolve);\n\n        content.on('error', reject);\n        content.pipe(file);\n      });\n    });\n\n    await temporary.cleanup();\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadTreeResponseDirOptions,\n  UrlReaderServiceReadTreeResponseFile,\n} from '@backstage/backend-plugin-api';\nimport concatStream from 'concat-stream';\nimport platformPath, { dirname } from 'path';\nimport getRawBody from 'raw-body';\nimport fs from 'fs-extra';\nimport { promisify } from 'util';\nimport tar from 'tar';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport { FromReadableArrayOptions } from '../types';\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a array of Readable objects into a tree response reader.\n */\nexport class ReadableArrayResponse implements UrlReaderServiceReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: FromReadableArrayOptions,\n    private readonly workDir: string,\n    public readonly etag: string,\n  ) {\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<UrlReaderServiceReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<UrlReaderServiceReadTreeResponseFile>();\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        files.push({\n          path: this.stream[i].path,\n          content: () => getRawBody(this.stream[i].data),\n          lastModifiedAt: this.stream[i]?.lastModifiedAt,\n        });\n      }\n    }\n\n    return files;\n  }\n\n  async archive(): Promise<NodeJS.ReadableStream> {\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(\n    options?: UrlReaderServiceReadTreeResponseDirOptions,\n  ): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        const filePath = platformPath.join(dir, this.stream[i].path);\n        await fs.mkdir(dirname(filePath), { recursive: true });\n        await pipeline(this.stream[i].data, fs.createWriteStream(filePath));\n      }\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport { Config } from '@backstage/config';\nimport {\n  ReadTreeResponseFactoryOptions,\n  ReadTreeResponseFactory,\n  FromReadableArrayOptions,\n} from '../types';\nimport { TarArchiveResponse } from './TarArchiveResponse';\nimport { ZipArchiveResponse } from './ZipArchiveResponse';\nimport { ReadableArrayResponse } from './ReadableArrayResponse';\nimport { UrlReaderServiceReadTreeResponse } from '@backstage/backend-plugin-api';\n\nexport class DefaultReadTreeResponseFactory implements ReadTreeResponseFactory {\n  static create(options: { config: Config }): DefaultReadTreeResponseFactory {\n    return new DefaultReadTreeResponseFactory(\n      options.config.getOptionalString('backend.workingDirectory') ??\n        os.tmpdir(),\n    );\n  }\n\n  constructor(private readonly workDir: string) {}\n\n  async fromTarArchive(\n    options: ReadTreeResponseFactoryOptions & {\n      stripFirstDirectory?: boolean;\n    },\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new TarArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n      options.stripFirstDirectory ?? true,\n    );\n  }\n\n  async fromZipArchive(\n    options: ReadTreeResponseFactoryOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new ZipArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n    );\n  }\n\n  async fromReadableArray(\n    options: FromReadableArrayOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    return new ReadableArrayResponse(options, this.workDir, '');\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as GoogleCloud from '@google-cloud/storage';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory } from './types';\nimport getRawBody from 'raw-body';\nimport {\n  GoogleGcsIntegrationConfig,\n  readGoogleGcsIntegrationConfig,\n} from '@backstage/integration';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport packageinfo from '../../../../package.json';\n\nconst GOOGLE_GCS_HOST = 'storage.cloud.google.com';\n\nconst parseURL = (\n  url: string,\n): { host: string; bucket: string; key: string } => {\n  const { host, pathname } = new URL(url);\n\n  if (host !== GOOGLE_GCS_HOST) {\n    throw new Error(`not a valid GCS URL: ${url}`);\n  }\n\n  const [, bucket, ...key] = pathname.split('/');\n  return {\n    host: host,\n    bucket,\n    key: key.join('/'),\n  };\n};\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on Google GCS.\n *\n * @public\n */\nexport class GoogleGcsUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger }) => {\n    if (!config.has('integrations.googleGcs')) {\n      return [];\n    }\n    const gcsConfig = readGoogleGcsIntegrationConfig(\n      config.getConfig('integrations.googleGcs'),\n    );\n    let storage: GoogleCloud.Storage;\n    if (!gcsConfig.clientEmail || !gcsConfig.privateKey) {\n      logger.info(\n        'googleGcs credentials not found in config. Using default credentials provider.',\n      );\n      storage = new GoogleCloud.Storage({\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    } else {\n      storage = new GoogleCloud.Storage({\n        credentials: {\n          client_email: gcsConfig.clientEmail || undefined,\n          private_key: gcsConfig.privateKey || undefined,\n        },\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    }\n    const reader = new GoogleGcsUrlReader(gcsConfig, storage);\n    const predicate = (url: URL) => url.host === GOOGLE_GCS_HOST;\n    return [{ reader, predicate }];\n  };\n\n  constructor(\n    private readonly integration: GoogleGcsIntegrationConfig,\n    private readonly storage: GoogleCloud.Storage,\n  ) {}\n\n  private readStreamFromUrl(url: string): Readable {\n    const { bucket, key } = parseURL(url);\n    return this.storage.bucket(bucket).file(key).createReadStream();\n  }\n\n  async read(url: string): Promise<Buffer> {\n    try {\n      return await getRawBody(this.readStreamFromUrl(url));\n    } catch (error) {\n      throw new Error(`unable to read gcs file from ${url}, ${error}`);\n    }\n  }\n\n  async readUrl(\n    url: string,\n    _options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO etag is not implemented yet.\n    const stream = this.readStreamFromUrl(url);\n    return ReadUrlResponseFactory.fromReadable(stream);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('GcsUrlReader does not implement readTree');\n  }\n\n  async search(url: string): Promise<UrlReaderServiceSearchResponse> {\n    const { bucket, key: pattern } = parseURL(url);\n\n    if (!pattern.endsWith('*') || pattern.indexOf('*') !== pattern.length - 1) {\n      throw new Error('GcsUrlReader only supports prefix-based searches');\n    }\n\n    const [files] = await this.storage.bucket(bucket).getFiles({\n      autoPaginate: true,\n      prefix: pattern.split('*').join(''),\n    });\n\n    return {\n      files: files.map(file => {\n        const fullUrl = ['https:/', GOOGLE_GCS_HOST, bucket, file.name].join(\n          '/',\n        );\n        return {\n          url: fullUrl,\n          content: async () => {\n            const readResponse = await this.readUrl(fullUrl);\n            return readResponse.buffer();\n          },\n        };\n      }),\n      // TODO etag is not implemented yet.\n      etag: 'NOT/IMPLEMENTED',\n    };\n  }\n\n  toString() {\n    const key = this.integration.privateKey;\n    return `googleGcs{host=${GOOGLE_GCS_HOST},authed=${Boolean(key)}}`;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  AwsCredentialsManager,\n  DefaultAwsCredentialsManager,\n} from '@backstage/integration-aws-node';\nimport {\n  AwsCodeCommitIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { fromTemporaryCredentials } from '@aws-sdk/credential-providers';\nimport {\n  CodeCommitClient,\n  GetFileCommand,\n  GetFileCommandInput,\n  GetFileCommandOutput,\n  GetFolderCommand,\n} from '@aws-sdk/client-codecommit';\nimport { AwsCredentialIdentityProvider } from '@aws-sdk/types';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { relative } from 'path/posix';\nimport { AbortController } from '@aws-sdk/abort-controller';\n\nexport function parseUrl(\n  url: string,\n  requireGitPath: boolean = false,\n): {\n  path: string;\n  repositoryName: string;\n  region: string;\n  commitSpecifier?: string;\n} {\n  const parsedUrl = new URL(url);\n\n  if (parsedUrl.pathname.includes('/files/edit/')) {\n    throw new Error(\n      'Please provide the view url to yaml file from CodeCommit, not the edit url',\n    );\n  }\n  if (requireGitPath && !parsedUrl.pathname.includes('/browse/')) {\n    throw new Error('Please provide full path to yaml file from CodeCommit');\n  }\n\n  const hostMatch = parsedUrl.host.match(\n    /^([^\\.]+)\\.console\\.aws\\.amazon\\.com$/,\n  );\n  if (!hostMatch) {\n    throw new Error(\n      `Invalid AWS CodeCommit URL (unexpected host format): ${url}`,\n    );\n  }\n  const [, region] = hostMatch;\n\n  const pathMatch = parsedUrl.pathname.match(\n    /^\\/codesuite\\/codecommit\\/repositories\\/([^\\/]+)\\/browse\\/((.*)\\/)?--\\/(.*)$/,\n  );\n\n  if (!pathMatch) {\n    if (!requireGitPath) {\n      const pathname = parsedUrl.pathname\n        .split('/--/')[0]\n        .replace('/codesuite/codecommit/repositories/', '');\n      const [repositoryName, commitSpecifier] = pathname.split('/browse');\n\n      return {\n        region,\n        repositoryName: repositoryName.replace(/^\\/|\\/$/g, ''),\n        path: '/',\n        commitSpecifier:\n          commitSpecifier === ''\n            ? undefined\n            : commitSpecifier?.replace(/^\\/|\\/$/g, ''),\n      };\n    }\n    throw new Error(\n      `Invalid AWS CodeCommit URL (unexpected path format): ${url}`,\n    );\n  }\n  const [, repositoryName, , commitSpecifier, path] = pathMatch;\n\n  return {\n    region,\n    repositoryName,\n    path,\n    // the commitSpecifier is passed to AWS SDK which does not allow empty strings so replace empty string with undefined\n    commitSpecifier: commitSpecifier === '' ? undefined : commitSpecifier,\n  };\n}\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for AWS CodeCommit.\n *\n * @public\n */\nexport class AwsCodeCommitUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credsManager = DefaultAwsCredentialsManager.fromConfig(config);\n\n    return integrations.awsCodeCommit.list().map(integration => {\n      const reader = new AwsCodeCommitUrlReader(credsManager, integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => {\n        return (\n          url.host.endsWith(integration.config.host) &&\n          url.pathname.startsWith('/codesuite/codecommit')\n        );\n      };\n\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly credsManager: AwsCredentialsManager,\n    private readonly integration: AwsCodeCommitIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  /**\n   * If accessKeyId and secretAccessKey are missing, the standard credentials provider chain will be used:\n   * https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n   */\n  private static buildStaticCredentials(\n    accessKeyId: string,\n    secretAccessKey: string,\n  ): AwsCredentialIdentityProvider {\n    return async () => {\n      return {\n        accessKeyId,\n        secretAccessKey,\n      };\n    };\n  }\n\n  private static async buildCredentials(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration?: AwsCodeCommitIntegration,\n  ): Promise<AwsCredentialIdentityProvider> {\n    // Fall back to the default credential chain if neither account ID\n    // nor explicit credentials are provided\n    if (!integration) {\n      return (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n    }\n\n    const accessKeyId = integration.config.accessKeyId;\n    const secretAccessKey = integration.config.secretAccessKey;\n    let explicitCredentials: AwsCredentialIdentityProvider;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = AwsCodeCommitUrlReader.buildStaticCredentials(\n        accessKeyId,\n        secretAccessKey,\n      );\n    } else {\n      explicitCredentials = (await credsManager.getCredentialProvider())\n        .sdkCredentialProvider;\n    }\n\n    const roleArn = integration.config.roleArn;\n    if (roleArn) {\n      return fromTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-code-commit-url-reader',\n          RoleArn: roleArn,\n          ExternalId: integration.config.externalId,\n        },\n        clientConfig: { region },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  private async buildCodeCommitClient(\n    credsManager: AwsCredentialsManager,\n    region: string,\n    integration: AwsCodeCommitIntegration,\n  ): Promise<CodeCommitClient> {\n    const credentials = await AwsCodeCommitUrlReader.buildCredentials(\n      credsManager,\n      region,\n      integration,\n    );\n\n    const codeCommit = new CodeCommitClient({\n      customUserAgent: 'backstage-aws-codecommit-url-reader',\n      region: region,\n      credentials: credentials,\n    });\n    return codeCommit;\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // etag and lastModifiedAfter are not supported by the CodeCommit API\n    try {\n      const { path, repositoryName, region, commitSpecifier } = parseUrl(\n        url,\n        true,\n      );\n      const codeCommitClient = await this.buildCodeCommitClient(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n      const abortController = new AbortController();\n\n      const input: GetFileCommandInput = {\n        repositoryName: repositoryName,\n        commitSpecifier: commitSpecifier,\n        filePath: path,\n      };\n\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n      const getObjectCommand = new GetFileCommand(input);\n      const response: GetFileCommandOutput = await codeCommitClient.send(\n        getObjectCommand,\n        {\n          abortSignal: abortController.signal,\n        },\n      );\n\n      if (options?.etag && options.etag === response.commitId) {\n        throw new NotModifiedError();\n      }\n\n      return ReadUrlResponseFactory.fromReadable(\n        Readable.from([response?.fileContent] || []),\n        {\n          etag: response.commitId,\n        },\n      );\n    } catch (e) {\n      if (e.$metadata && e.$metadata.httpStatusCode === 304) {\n        throw new NotModifiedError();\n      }\n      if (e.name && e.name === 'NotModifiedError') {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError('Could not retrieve file from CodeCommit', e);\n    }\n  }\n\n  async readTreePath(\n    codeCommitClient: CodeCommitClient,\n    abortSignal: any,\n    path: string,\n    repositoryName: string,\n    commitSpecifier?: string,\n    etag?: string,\n  ): Promise<string[]> {\n    const getFolderCommand = new GetFolderCommand({\n      folderPath: path,\n      repositoryName: repositoryName,\n      commitSpecifier: commitSpecifier,\n    });\n    const response = await codeCommitClient.send(getFolderCommand, {\n      abortSignal: abortSignal,\n    });\n\n    if (etag && etag === response.commitId) {\n      throw new NotModifiedError();\n    }\n\n    const output: string[] = [];\n    if (response.files) {\n      response.files.forEach(file => {\n        if (file.absolutePath) {\n          output.push(file.absolutePath);\n        }\n      });\n    }\n    if (!response.subFolders) {\n      return output;\n    }\n\n    for (const subFolder of response.subFolders) {\n      if (subFolder.absolutePath) {\n        output.push(\n          ...(await this.readTreePath(\n            codeCommitClient,\n            abortSignal,\n            subFolder.absolutePath,\n            repositoryName,\n            commitSpecifier,\n            etag,\n          )),\n        );\n      }\n    }\n    return output;\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // url: https://eu-west-1.console.aws.amazon.com/codesuite/codecommit/repositories/test-stijn-delete-techdocs/browse?region=eu-west-1\n    try {\n      const { path, repositoryName, region, commitSpecifier } = parseUrl(url);\n      const codeCommitClient = await this.buildCodeCommitClient(\n        this.credsManager,\n        region,\n        this.integration,\n      );\n\n      const abortController = new AbortController();\n      options?.signal?.addEventListener('abort', () => abortController.abort());\n\n      const allFiles: string[] = await this.readTreePath(\n        codeCommitClient,\n        abortController.signal,\n        path,\n        repositoryName,\n        commitSpecifier,\n        options?.etag,\n      );\n      const responses = [];\n\n      for (let i = 0; i < allFiles.length; i++) {\n        const getFileCommand = new GetFileCommand({\n          repositoryName: repositoryName,\n          filePath: String(allFiles[i]),\n          commitSpecifier: commitSpecifier,\n        });\n        const response = await codeCommitClient.send(getFileCommand);\n        const objectData = await Readable.from([response?.fileContent] || []);\n\n        responses.push({\n          data: objectData,\n          path: relative(\n            path.startsWith('/') ? path : `/${path}`,\n            allFiles[i].startsWith('/') ? allFiles[i] : `/${allFiles[i]}`,\n          ),\n        });\n      }\n\n      return await this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      if (e.name && e.name === 'NotModifiedError') {\n        throw new NotModifiedError();\n      }\n      throw new ForwardedError(\n        'Could not retrieve file tree from CodeCommit',\n        e,\n      );\n    }\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('AwsCodeCommitReader does not implement search');\n  }\n\n  toString() {\n    const secretAccessKey = this.integration.config.secretAccessKey;\n    return `awsCodeCommit{host=${this.integration.config.host},authed=${Boolean(\n      secretAccessKey,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootConfigService,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory } from './types';\nimport { UrlReaderPredicateMux } from './UrlReaderPredicateMux';\nimport { AzureUrlReader } from './AzureUrlReader';\nimport { BitbucketCloudUrlReader } from './BitbucketCloudUrlReader';\nimport { BitbucketServerUrlReader } from './BitbucketServerUrlReader';\nimport { BitbucketUrlReader } from './BitbucketUrlReader';\nimport { GerritUrlReader } from './GerritUrlReader';\nimport { GithubUrlReader } from './GithubUrlReader';\nimport { GitlabUrlReader } from './GitlabUrlReader';\nimport { DefaultReadTreeResponseFactory } from './tree';\nimport { FetchUrlReader } from './FetchUrlReader';\nimport { GoogleGcsUrlReader } from './GoogleGcsUrlReader';\nimport { AwsS3UrlReader } from './AwsS3UrlReader';\nimport { GiteaUrlReader } from './GiteaUrlReader';\nimport { AwsCodeCommitUrlReader } from './AwsCodeCommitUrlReader';\nimport { HarnessUrlReader } from './HarnessUrlReader';\n\n/**\n * Creation options for {@link @backstage/backend-plugin-api#UrlReaderService}.\n *\n * @public\n */\nexport type UrlReadersOptions = {\n  /** Root config object */\n  config: RootConfigService;\n  /** Logger used by all the readers */\n  logger: LoggerService;\n  /** A list of factories used to construct individual readers that match on URLs */\n  factories?: ReaderFactory[];\n};\n\n/**\n * Helps construct {@link @backstage/backend-plugin-api#UrlReaderService}s.\n *\n * @public\n */\nexport class UrlReaders {\n  /**\n   * Creates a custom {@link @backstage/backend-plugin-api#UrlReaderService} wrapper for your own set of factories.\n   */\n  static create(options: UrlReadersOptions): UrlReaderService {\n    const { logger, config, factories } = options;\n    const mux = new UrlReaderPredicateMux();\n    const treeResponseFactory = DefaultReadTreeResponseFactory.create({\n      config,\n    });\n    for (const factory of factories ?? []) {\n      const tuples = factory({ config, logger: logger, treeResponseFactory });\n\n      for (const tuple of tuples) {\n        mux.register(tuple);\n      }\n    }\n\n    return mux;\n  }\n\n  /**\n   * Creates a {@link @backstage/backend-plugin-api#UrlReaderService} wrapper that includes all the default factories\n   * from this package.\n   *\n   * Any additional factories passed will be loaded before the default ones.\n   */\n  static default(options: UrlReadersOptions) {\n    const { logger, config, factories = [] } = options;\n    return UrlReaders.create({\n      logger,\n      config,\n      factories: factories.concat([\n        AzureUrlReader.factory,\n        BitbucketCloudUrlReader.factory,\n        BitbucketServerUrlReader.factory,\n        BitbucketUrlReader.factory,\n        GerritUrlReader.factory,\n        GithubUrlReader.factory,\n        GiteaUrlReader.factory,\n        GitlabUrlReader.factory,\n        GoogleGcsUrlReader.factory,\n        HarnessUrlReader.factory,\n        AwsS3UrlReader.factory,\n        AwsCodeCommitUrlReader.factory,\n        FetchUrlReader.factory,\n      ]),\n    });\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReaderFactory } from './lib';\nimport { UrlReaders } from './lib/UrlReaders';\nimport {\n  coreServices,\n  createServiceFactory,\n  createServiceRef,\n} from '@backstage/backend-plugin-api';\n\n/**\n * @public\n * A non-singleton reference to URL Reader factory services.\n *\n * @example\n * Creating a service factory implementation for a Custom URL Reader.\n * ```ts\n * createServiceFactory({\n *   service: urlReaderFactoriesServiceRef,\n *   deps: {},\n *   async factory() {\n *     return CustomUrlReader.factory;\n *   },\n * });\n * ```\n */\nexport const urlReaderFactoriesServiceRef = createServiceRef<ReaderFactory>({\n  id: 'core.urlReader.factories',\n  scope: 'plugin',\n  multiton: true,\n});\n\n/**\n * Reading content from external systems.\n *\n * See {@link @backstage/code-plugin-api#UrlReaderService}\n * and {@link https://backstage.io/docs/backend-system/core-services/url-reader | the service docs}\n * for more information.\n *\n * @public\n */\nexport const urlReaderServiceFactory = createServiceFactory({\n  service: coreServices.urlReader,\n  deps: {\n    config: coreServices.rootConfig,\n    logger: coreServices.logger,\n    factories: urlReaderFactoriesServiceRef,\n  },\n  async factory({ config, logger, factories }) {\n    return UrlReaders.default({\n      config,\n      logger,\n      factories,\n    });\n  },\n});\n"],"names":["ConflictError","getRawBody","Readable","ScmIntegrations","DefaultAzureDevOpsCredentialsProvider","getAzureFileFetchUrl","fetch","NotFoundError","getAzureCommitsUrl","NotModifiedError","getAzureDownloadUrl","Minimatch","getBitbucketCloudFileFetchUrl","getBitbucketCloudRequestOptions","parseGitUrl","getBitbucketCloudDownloadUrl","trimEnd","getBitbucketCloudDefaultBranch","getBitbucketFileFetchUrl","getBitbucketRequestOptions","getBitbucketDownloadUrl","getBitbucketDefaultBranch","getBitbucketServerFileFetchUrl","getBitbucketServerRequestOptions","getBitbucketServerDownloadUrl","getGerritFileContentsApiUrl","getGerritRequestOptions","Base64Decode","getGerritBranchApiUrl","parseGerritJsonResponse","parseGerritGitilesUrl","buildGerritGitilesArchiveUrl","DefaultGithubCredentialsProvider","getGithubFileFetchUrl","getGitLabRequestOptions","getGitLabIntegrationRelativePath","trimStart","getGitLabFileFetchUrl","getGiteaFileContentsUrl","getGiteaRequestOptions","AuthenticationError","getGiteaArchiveUrl","parseGiteaUrl","getGiteaLatestCommitUrl","getHarnessFileContentsUrl","getHarnessRequestOptions","getHarnessArchiveUrl","parseHarnessUrl","getHarnessLatestCommitUrl","parseUrl","DefaultAwsCredentialsManager","fromTemporaryCredentials","S3Client","stream","ForwardedError","abortController","AbortController","GetObjectCommand","ListObjectsV2Command","relative","path","NotAllowedError","pipeline","promisify","pipelineCb","concatStream","Parse","tar","fs","platformPath","yauzl","archiver","resolveSafeChildPath","dirname","os","readGoogleGcsIntegrationConfig","GoogleCloud","repositoryName","commitSpecifier","CodeCommitClient","GetFileCommand","GetFolderCommand","createServiceRef","createServiceFactory","coreServices"],"mappings":"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"}