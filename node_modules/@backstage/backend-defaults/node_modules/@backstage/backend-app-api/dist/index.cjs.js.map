{"version":3,"file":"index.cjs.js","sources":["../src/lib/DependencyGraph.ts","../src/wiring/ServiceRegistry.ts","../src/wiring/createInitializationLogger.ts","../src/wiring/helpers.ts","../src/wiring/BackendInitializer.ts","../src/wiring/BackstageBackend.ts","../src/wiring/createSpecializedBackend.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface NodeInput<T> {\n  value: T;\n  consumes?: Iterable<string>;\n  provides?: Iterable<string>;\n}\n\n/** @internal */\nclass Node<T> {\n  static from<T>(input: NodeInput<T>) {\n    return new Node<T>(\n      input.value,\n      input.consumes ? new Set(input.consumes) : new Set(),\n      input.provides ? new Set(input.provides) : new Set(),\n    );\n  }\n\n  private constructor(\n    readonly value: T,\n    readonly consumes: Set<string>,\n    readonly provides: Set<string>,\n  ) {}\n}\n\n/** @internal */\nclass CycleKeySet<T> {\n  static from<T>(nodes: Array<Node<T>>) {\n    return new CycleKeySet<T>(nodes);\n  }\n\n  #nodeIds: Map<T, number>;\n  #cycleKeys: Set<string>;\n\n  private constructor(nodes: Array<Node<T>>) {\n    this.#nodeIds = new Map(nodes.map((n, i) => [n.value, i]));\n    this.#cycleKeys = new Set<string>();\n  }\n\n  tryAdd(path: T[]): boolean {\n    const cycleKey = this.#getCycleKey(path);\n    if (this.#cycleKeys.has(cycleKey)) {\n      return false;\n    }\n    this.#cycleKeys.add(cycleKey);\n    return true;\n  }\n\n  #getCycleKey(path: T[]): string {\n    return path\n      .map(n => this.#nodeIds.get(n)!)\n      .sort()\n      .join(',');\n  }\n}\n\n/**\n * Internal helper to help validate and traverse a dependency graph.\n * @internal\n */\nexport class DependencyGraph<T> {\n  static fromMap(\n    nodes: Record<string, Omit<NodeInput<unknown>, 'value'>>,\n  ): DependencyGraph<string> {\n    return this.fromIterable(\n      Object.entries(nodes).map(([key, node]) => ({\n        value: String(key),\n        ...node,\n      })),\n    );\n  }\n\n  static fromIterable<T>(\n    nodeInputs: Iterable<NodeInput<T>>,\n  ): DependencyGraph<T> {\n    const nodes = new Array<Node<T>>();\n    for (const nodeInput of nodeInputs) {\n      nodes.push(Node.from(nodeInput));\n    }\n\n    return new DependencyGraph(nodes);\n  }\n\n  #nodes: Array<Node<T>>;\n  #allProvided: Set<string>;\n\n  private constructor(nodes: Array<Node<T>>) {\n    this.#nodes = nodes;\n    this.#allProvided = new Set();\n\n    for (const node of this.#nodes.values()) {\n      for (const produced of node.provides) {\n        this.#allProvided.add(produced);\n      }\n    }\n  }\n\n  /**\n   * Find all nodes that consume dependencies that are not provided by any other node.\n   */\n  findUnsatisfiedDeps(): Array<{ value: T; unsatisfied: string[] }> {\n    const unsatisfiedDependencies = [];\n    for (const node of this.#nodes.values()) {\n      const unsatisfied = Array.from(node.consumes).filter(\n        id => !this.#allProvided.has(id),\n      );\n      if (unsatisfied.length > 0) {\n        unsatisfiedDependencies.push({ value: node.value, unsatisfied });\n      }\n    }\n    return unsatisfiedDependencies;\n  }\n\n  /**\n   * Detect the first circular dependency within the graph, returning the path of nodes that\n   * form a cycle, with the same node as the first and last element of the array.\n   */\n  detectCircularDependency(): T[] | undefined {\n    return this.detectCircularDependencies().next().value;\n  }\n\n  /**\n   * Detect circular dependencies within the graph, returning the path of nodes that\n   * form a cycle, with the same node as the first and last element of the array.\n   */\n  *detectCircularDependencies(): Generator<T[], undefined> {\n    const cycleKeys = CycleKeySet.from(this.#nodes);\n\n    for (const startNode of this.#nodes) {\n      const visited = new Set<Node<T>>();\n      const stack = new Array<[node: Node<T>, path: T[]]>([\n        startNode,\n        [startNode.value],\n      ]);\n\n      while (stack.length > 0) {\n        const [node, path] = stack.pop()!;\n        if (visited.has(node)) {\n          continue;\n        }\n        visited.add(node);\n        for (const consumed of node.consumes) {\n          const providerNodes = this.#nodes.filter(other =>\n            other.provides.has(consumed),\n          );\n          for (const provider of providerNodes) {\n            if (provider === startNode) {\n              if (cycleKeys.tryAdd(path)) {\n                yield [...path, startNode.value];\n              }\n\n              break;\n            }\n            if (!visited.has(provider)) {\n              stack.push([provider, [...path, provider.value]]);\n            }\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Traverses the dependency graph in topological order, calling the provided\n   * function for each node and waiting for it to resolve.\n   *\n   * The nodes are traversed in parallel, but in such a way that no node is\n   * visited before all of its dependencies.\n   *\n   * Dependencies of nodes that are not produced by any other nodes will be ignored.\n   */\n  async parallelTopologicalTraversal<TResult>(\n    fn: (value: T) => Promise<TResult>,\n  ): Promise<TResult[]> {\n    const allProvided = this.#allProvided;\n    const producedSoFar = new Set<string>();\n    const waiting = new Set(this.#nodes.values());\n    const visited = new Set<Node<T>>();\n    const results = new Array<TResult>();\n    let inFlight = 0; // Keep track of how many callbacks are in flight, so that we know if we got stuck\n\n    // Find all nodes that have no dependencies that have not already been produced by visited nodes\n    async function processMoreNodes() {\n      if (waiting.size === 0) {\n        return;\n      }\n      const nodesToProcess = [];\n      for (const node of waiting) {\n        let ready = true;\n        for (const consumed of node.consumes) {\n          if (allProvided.has(consumed) && !producedSoFar.has(consumed)) {\n            ready = false;\n            continue;\n          }\n        }\n        if (ready) {\n          nodesToProcess.push(node);\n        }\n      }\n\n      for (const node of nodesToProcess) {\n        waiting.delete(node);\n      }\n\n      if (nodesToProcess.length === 0 && inFlight === 0) {\n        // We expect the caller to check for circular dependencies before\n        // traversal, so this error should never happen\n        throw new Error('Circular dependency detected');\n      }\n\n      await Promise.all(nodesToProcess.map(processNode));\n    }\n\n    // Process an individual node, and then add its produced dependencies to the set of available products\n    async function processNode(node: Node<T>) {\n      visited.add(node);\n      inFlight += 1;\n\n      const result = await fn(node.value);\n      results.push(result);\n\n      node.provides.forEach(produced => producedSoFar.add(produced));\n      inFlight -= 1;\n      await processMoreNodes();\n    }\n\n    await processMoreNodes();\n\n    return results;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ServiceFactory,\n  ServiceRef,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { ConflictError, stringifyError } from '@backstage/errors';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-forbidden-package-imports\nimport { InternalServiceFactory } from '@backstage/backend-plugin-api/src/services/system/types';\nimport { DependencyGraph } from '../lib/DependencyGraph';\n/**\n * Keep in sync with `@backstage/backend-plugin-api/src/services/system/types.ts`\n * @internal\n */\nexport type InternalServiceRef = ServiceRef<unknown> & {\n  __defaultFactory?: (\n    service: ServiceRef<unknown>,\n  ) => Promise<ServiceFactory | (() => ServiceFactory)>;\n};\n\nfunction toInternalServiceFactory<TService, TScope extends 'plugin' | 'root'>(\n  factory: ServiceFactory<TService, TScope>,\n): InternalServiceFactory<TService, TScope> {\n  const f = factory as InternalServiceFactory<TService, TScope>;\n  if (f.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid service factory, bad type '${f.$$type}'`);\n  }\n  if (f.version !== 'v1') {\n    throw new Error(`Invalid service factory, bad version '${f.version}'`);\n  }\n  return f;\n}\n\nfunction createPluginMetadataServiceFactory(pluginId: string) {\n  return createServiceFactory({\n    service: coreServices.pluginMetadata,\n    deps: {},\n    factory: async () => ({ getId: () => pluginId }),\n  });\n}\n\nexport class ServiceRegistry {\n  static create(factories: Array<ServiceFactory>): ServiceRegistry {\n    const factoryMap = new Map<string, InternalServiceFactory[]>();\n    for (const factory of factories) {\n      if (factory.service.multiton) {\n        const existing = factoryMap.get(factory.service.id) ?? [];\n        factoryMap.set(\n          factory.service.id,\n          existing.concat(toInternalServiceFactory(factory)),\n        );\n      } else {\n        factoryMap.set(factory.service.id, [toInternalServiceFactory(factory)]);\n      }\n    }\n    const registry = new ServiceRegistry(factoryMap);\n    registry.checkForCircularDeps();\n    return registry;\n  }\n\n  readonly #providedFactories: Map<string, InternalServiceFactory[]>;\n  readonly #loadedDefaultFactories: Map<\n    Function,\n    Promise<InternalServiceFactory>\n  >;\n  readonly #implementations: Map<\n    InternalServiceFactory,\n    {\n      context: Promise<unknown>;\n      byPlugin: Map<string, Promise<unknown>>;\n    }\n  >;\n  readonly #rootServiceImplementations = new Map<\n    InternalServiceFactory,\n    Promise<unknown>\n  >();\n  readonly #addedFactoryIds = new Set<string>();\n  readonly #instantiatedFactories = new Set<string>();\n\n  private constructor(factories: Map<string, InternalServiceFactory[]>) {\n    this.#providedFactories = factories;\n    this.#loadedDefaultFactories = new Map();\n    this.#implementations = new Map();\n  }\n\n  #resolveFactory(\n    ref: ServiceRef<unknown>,\n    pluginId: string,\n  ): Promise<InternalServiceFactory[]> | undefined {\n    // Special case handling of the plugin metadata service, generating a custom factory for it each time\n    if (ref.id === coreServices.pluginMetadata.id) {\n      return Promise.resolve([\n        toInternalServiceFactory(createPluginMetadataServiceFactory(pluginId)),\n      ]);\n    }\n\n    let resolvedFactory:\n      | Promise<InternalServiceFactory[]>\n      | InternalServiceFactory[]\n      | undefined = this.#providedFactories.get(ref.id);\n    const { __defaultFactory: defaultFactory } = ref as InternalServiceRef;\n    if (!resolvedFactory && !defaultFactory) {\n      return undefined;\n    }\n\n    if (!resolvedFactory) {\n      let loadedFactory = this.#loadedDefaultFactories.get(defaultFactory!);\n      if (!loadedFactory) {\n        loadedFactory = Promise.resolve()\n          .then(() => defaultFactory!(ref))\n          .then(f =>\n            toInternalServiceFactory(typeof f === 'function' ? f() : f),\n          );\n        this.#loadedDefaultFactories.set(defaultFactory!, loadedFactory);\n      }\n      resolvedFactory = loadedFactory.then(\n        factory => [factory],\n        error => {\n          throw new Error(\n            `Failed to instantiate service '${\n              ref.id\n            }' because the default factory loader threw an error, ${stringifyError(\n              error,\n            )}`,\n          );\n        },\n      );\n    }\n\n    return Promise.resolve(resolvedFactory);\n  }\n\n  #checkForMissingDeps(factory: InternalServiceFactory, pluginId: string) {\n    const missingDeps = Object.values(factory.deps).filter(ref => {\n      if (ref.id === coreServices.pluginMetadata.id) {\n        return false;\n      }\n      if (this.#providedFactories.get(ref.id)) {\n        return false;\n      }\n      if (ref.multiton) {\n        return false;\n      }\n\n      return !(ref as InternalServiceRef).__defaultFactory;\n    });\n\n    if (missingDeps.length) {\n      const missing = missingDeps.map(r => `'${r.id}'`).join(', ');\n      throw new Error(\n        `Failed to instantiate service '${factory.service.id}' for '${pluginId}' because the following dependent services are missing: ${missing}`,\n      );\n    }\n  }\n\n  checkForCircularDeps(): void {\n    const graph = DependencyGraph.fromIterable(\n      Array.from(this.#providedFactories).map(([serviceId, factories]) => ({\n        value: serviceId,\n        provides: [serviceId],\n        consumes: factories.flatMap(factory =>\n          Object.values(factory.deps).map(d => d.id),\n        ),\n      })),\n    );\n    const circularDependencies = Array.from(graph.detectCircularDependencies());\n\n    if (circularDependencies.length) {\n      const cycles = circularDependencies\n        .map(c => c.map(id => `'${id}'`).join(' -> '))\n        .join('\\n  ');\n\n      throw new ConflictError(`Circular dependencies detected:\\n  ${cycles}`);\n    }\n  }\n\n  add(factory: ServiceFactory) {\n    const factoryId = factory.service.id;\n    if (factoryId === coreServices.pluginMetadata.id) {\n      throw new Error(\n        `The ${coreServices.pluginMetadata.id} service cannot be overridden`,\n      );\n    }\n\n    if (this.#instantiatedFactories.has(factoryId)) {\n      throw new Error(\n        `Unable to set service factory with id ${factoryId}, service has already been instantiated`,\n      );\n    }\n\n    if (factory.service.multiton) {\n      const newFactories = (\n        this.#providedFactories.get(factoryId) ?? []\n      ).concat(toInternalServiceFactory(factory));\n      this.#providedFactories.set(factoryId, newFactories);\n    } else {\n      if (this.#addedFactoryIds.has(factoryId)) {\n        throw new Error(\n          `Duplicate service implementations provided for ${factoryId}`,\n        );\n      }\n\n      this.#addedFactoryIds.add(factoryId);\n      this.#providedFactories.set(factoryId, [\n        toInternalServiceFactory(factory),\n      ]);\n    }\n  }\n\n  async initializeEagerServicesWithScope(\n    scope: 'root' | 'plugin',\n    pluginId: string = 'root',\n  ) {\n    for (const [factory] of this.#providedFactories.values()) {\n      if (factory.service.scope === scope) {\n        // Root-scoped services are eager by default, plugin-scoped are lazy by default\n        if (scope === 'root' && factory.initialization !== 'lazy') {\n          await this.get(factory.service, pluginId);\n        } else if (scope === 'plugin' && factory.initialization === 'always') {\n          await this.get(factory.service, pluginId);\n        }\n      }\n    }\n  }\n\n  get<T, TInstances extends 'singleton' | 'multiton'>(\n    ref: ServiceRef<T, 'plugin' | 'root', TInstances>,\n    pluginId: string,\n  ): Promise<TInstances extends 'multiton' ? T[] : T> | undefined {\n    this.#instantiatedFactories.add(ref.id);\n\n    const resolvedFactory = this.#resolveFactory(ref, pluginId);\n\n    if (!resolvedFactory) {\n      return ref.multiton\n        ? (Promise.resolve([]) as\n            | Promise<TInstances extends 'multiton' ? T[] : T>\n            | undefined)\n        : undefined;\n    }\n\n    return resolvedFactory\n      .then(factories => {\n        return Promise.all(\n          factories.map(factory => {\n            if (factory.service.scope === 'root') {\n              let existing = this.#rootServiceImplementations.get(factory);\n              if (!existing) {\n                this.#checkForMissingDeps(factory, pluginId);\n                const rootDeps = new Array<\n                  Promise<[name: string, impl: unknown]>\n                >();\n\n                for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                  if (serviceRef.scope !== 'root') {\n                    throw new Error(\n                      `Failed to instantiate 'root' scoped service '${ref.id}' because it depends on '${serviceRef.scope}' scoped service '${serviceRef.id}'.`,\n                    );\n                  }\n                  const target = this.get(serviceRef, pluginId)!;\n                  rootDeps.push(target.then(impl => [name, impl]));\n                }\n\n                existing = Promise.all(rootDeps).then(entries =>\n                  factory.factory(Object.fromEntries(entries), undefined),\n                );\n                this.#rootServiceImplementations.set(factory, existing);\n              }\n              return existing as Promise<T>;\n            }\n\n            let implementation = this.#implementations.get(factory);\n            if (!implementation) {\n              this.#checkForMissingDeps(factory, pluginId);\n              const rootDeps = new Array<\n                Promise<[name: string, impl: unknown]>\n              >();\n\n              for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                if (serviceRef.scope === 'root') {\n                  const target = this.get(serviceRef, pluginId)!;\n                  rootDeps.push(target.then(impl => [name, impl]));\n                }\n              }\n\n              implementation = {\n                context: Promise.all(rootDeps)\n                  .then(entries =>\n                    factory.createRootContext?.(Object.fromEntries(entries)),\n                  )\n                  .catch(error => {\n                    const cause = stringifyError(error);\n                    throw new Error(\n                      `Failed to instantiate service '${ref.id}' because createRootContext threw an error, ${cause}`,\n                    );\n                  }),\n                byPlugin: new Map(),\n              };\n\n              this.#implementations.set(factory, implementation);\n            }\n\n            let result = implementation.byPlugin.get(pluginId) as Promise<any>;\n            if (!result) {\n              const allDeps = new Array<\n                Promise<[name: string, impl: unknown]>\n              >();\n\n              for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                const target = this.get(serviceRef, pluginId)!;\n                allDeps.push(target.then(impl => [name, impl]));\n              }\n\n              result = implementation.context\n                .then(context =>\n                  Promise.all(allDeps).then(entries =>\n                    factory.factory(Object.fromEntries(entries), context),\n                  ),\n                )\n                .catch(error => {\n                  const cause = stringifyError(error);\n                  throw new Error(\n                    `Failed to instantiate service '${ref.id}' for '${pluginId}' because the factory function threw an error, ${cause}`,\n                  );\n                });\n              implementation.byPlugin.set(pluginId, result);\n            }\n            return result;\n          }),\n        );\n      })\n      .then(results => (ref.multiton ? results : results[0]));\n  }\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RootLoggerService } from '@backstage/backend-plugin-api';\n\nconst LOGGER_INTERVAL_MAX = 60_000;\n\nfunction joinIds(ids: Iterable<string>): string {\n  return [...ids].map(id => `'${id}'`).join(', ');\n}\n\nexport function createInitializationLogger(\n  pluginIds: string[],\n  rootLogger?: RootLoggerService,\n): {\n  onPluginStarted(pluginId: string): void;\n  onAllStarted(): void;\n} {\n  const logger = rootLogger?.child({ type: 'initialization' });\n  const starting = new Set(pluginIds);\n  const started = new Set<string>();\n\n  logger?.info(`Plugin initialization started: ${joinIds(pluginIds)}`);\n\n  const getInitStatus = () => {\n    let status = '';\n    if (started.size > 0) {\n      status = `, newly initialized: ${joinIds(started)}`;\n      started.clear();\n    }\n    if (starting.size > 0) {\n      status += `, still initializing: ${joinIds(starting)}`;\n    }\n    return status;\n  };\n\n  // Periodically log the initialization status with a fibonacci backoff\n  let interval = 1000;\n  let prevInterval = 0;\n  let timeout: NodeJS.Timeout | undefined;\n  const onTimeout = () => {\n    logger?.info(`Plugin initialization in progress${getInitStatus()}`);\n\n    const nextInterval = Math.min(interval + prevInterval, LOGGER_INTERVAL_MAX);\n    prevInterval = interval;\n    interval = nextInterval;\n\n    timeout = setTimeout(onTimeout, nextInterval);\n  };\n  timeout = setTimeout(onTimeout, interval);\n\n  return {\n    onPluginStarted(pluginId: string) {\n      starting.delete(pluginId);\n      started.add(pluginId);\n    },\n    onAllStarted() {\n      logger?.info(`Plugin initialization complete${getInitStatus()}`);\n\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = undefined;\n      }\n    },\n  };\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackendFeature } from '@backstage/backend-plugin-api';\n\n/** @internal */\nexport function unwrapFeature(\n  feature: BackendFeature | { default: BackendFeature },\n): BackendFeature {\n  if ('$$type' in feature) {\n    return feature;\n  }\n\n  // This is a workaround where default exports get transpiled to `exports['default'] = ...`\n  // in CommonJS modules, which in turn results in a double `{ default: { default: ... } }` nesting\n  // when importing using a dynamic import.\n  // TODO: This is a broader issue than just this piece of code, and should move away from CommonJS.\n  if ('default' in feature) {\n    return feature.default;\n  }\n\n  return feature;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackendFeature,\n  ExtensionPoint,\n  coreServices,\n  ServiceRef,\n  ServiceFactory,\n  LifecycleService,\n  RootLifecycleService,\n} from '@backstage/backend-plugin-api';\nimport { ServiceOrExtensionPoint } from './types';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type {\n  InternalBackendFeature,\n  InternalBackendFeatureLoader,\n  InternalBackendRegistrations,\n} from '../../../backend-plugin-api/src/wiring/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type { InternalServiceFactory } from '../../../backend-plugin-api/src/services/system/types';\nimport { ForwardedError, ConflictError } from '@backstage/errors';\nimport { featureDiscoveryServiceRef } from '@backstage/backend-plugin-api/alpha';\nimport { DependencyGraph } from '../lib/DependencyGraph';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { createInitializationLogger } from './createInitializationLogger';\nimport { unwrapFeature } from './helpers';\n\nexport interface BackendRegisterInit {\n  consumes: Set<ServiceOrExtensionPoint>;\n  provides: Set<ServiceOrExtensionPoint>;\n  init: {\n    deps: { [name: string]: ServiceOrExtensionPoint };\n    func: (deps: { [name: string]: unknown }) => Promise<void>;\n  };\n}\n\n/**\n * A registry of backend instances, used to manage process shutdown hooks across all instances.\n */\nconst instanceRegistry = new (class InstanceRegistry {\n  #registered = false;\n  #instances = new Set<BackendInitializer>();\n\n  register(instance: BackendInitializer) {\n    if (!this.#registered) {\n      this.#registered = true;\n\n      process.addListener('SIGTERM', this.#exitHandler);\n      process.addListener('SIGINT', this.#exitHandler);\n      process.addListener('beforeExit', this.#exitHandler);\n    }\n\n    this.#instances.add(instance);\n  }\n\n  unregister(instance: BackendInitializer) {\n    this.#instances.delete(instance);\n  }\n\n  #exitHandler = async () => {\n    try {\n      const results = await Promise.allSettled(\n        Array.from(this.#instances).map(b => b.stop()),\n      );\n      const errors = results.flatMap(r =>\n        r.status === 'rejected' ? [r.reason] : [],\n      );\n\n      if (errors.length > 0) {\n        for (const error of errors) {\n          console.error(error);\n        }\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    } catch (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  };\n})();\n\nexport class BackendInitializer {\n  #startPromise?: Promise<void>;\n  #stopPromise?: Promise<void>;\n  #registrations = new Array<InternalBackendRegistrations>();\n  #extensionPoints = new Map<string, { impl: unknown; pluginId: string }>();\n  #serviceRegistry: ServiceRegistry;\n  #registeredFeatures = new Array<Promise<BackendFeature>>();\n  #registeredFeatureLoaders = new Array<InternalBackendFeatureLoader>();\n\n  constructor(defaultApiFactories: ServiceFactory[]) {\n    this.#serviceRegistry = ServiceRegistry.create([...defaultApiFactories]);\n  }\n\n  async #getInitDeps(\n    deps: { [name: string]: ServiceOrExtensionPoint },\n    pluginId: string,\n    moduleId?: string,\n  ) {\n    const result = new Map<string, unknown>();\n    const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n    for (const [name, ref] of Object.entries(deps)) {\n      const ep = this.#extensionPoints.get(ref.id);\n      if (ep) {\n        if (ep.pluginId !== pluginId) {\n          throw new Error(\n            `Illegal dependency: Module '${moduleId}' for plugin '${pluginId}' attempted to depend on extension point '${ref.id}' for plugin '${ep.pluginId}'. Extension points can only be used within their plugin's scope.`,\n          );\n        }\n        result.set(name, ep.impl);\n      } else {\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          pluginId,\n        );\n        if (impl) {\n          result.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n    }\n\n    if (missingRefs.size > 0) {\n      const missing = Array.from(missingRefs).join(', ');\n      const target = moduleId\n        ? `module '${moduleId}' for plugin '${pluginId}'`\n        : `plugin '${pluginId}'`;\n      throw new Error(\n        `Service or extension point dependencies of ${target} are missing for the following ref(s): ${missing}`,\n      );\n    }\n\n    return Object.fromEntries(result);\n  }\n\n  add(feature: BackendFeature | Promise<BackendFeature>) {\n    if (this.#startPromise) {\n      throw new Error('feature can not be added after the backend has started');\n    }\n    this.#registeredFeatures.push(Promise.resolve(feature));\n  }\n\n  #addFeature(feature: BackendFeature) {\n    if (isServiceFactory(feature)) {\n      this.#serviceRegistry.add(feature);\n    } else if (isBackendFeatureLoader(feature)) {\n      this.#registeredFeatureLoaders.push(feature);\n    } else if (isBackendRegistrations(feature)) {\n      this.#registrations.push(feature);\n    } else {\n      throw new Error(\n        `Failed to add feature, invalid feature ${JSON.stringify(feature)}`,\n      );\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.#startPromise) {\n      throw new Error('Backend has already started');\n    }\n    if (this.#stopPromise) {\n      throw new Error('Backend has already stopped');\n    }\n\n    instanceRegistry.register(this);\n\n    this.#startPromise = this.#doStart();\n    await this.#startPromise;\n  }\n\n  async #doStart(): Promise<void> {\n    this.#serviceRegistry.checkForCircularDeps();\n\n    for (const feature of this.#registeredFeatures) {\n      this.#addFeature(await feature);\n    }\n\n    const featureDiscovery = await this.#serviceRegistry.get(\n      // TODO: Let's leave this in place and remove it once the deprecated service is removed. We can do that post-1.0 since it's alpha\n      featureDiscoveryServiceRef,\n      'root',\n    );\n\n    if (featureDiscovery) {\n      const { features } = await featureDiscovery.getBackendFeatures();\n      for (const feature of features) {\n        this.#addFeature(unwrapFeature(feature));\n      }\n      this.#serviceRegistry.checkForCircularDeps();\n    }\n\n    await this.#applyBackendFeatureLoaders(this.#registeredFeatureLoaders);\n\n    // Initialize all root scoped services\n    await this.#serviceRegistry.initializeEagerServicesWithScope('root');\n\n    const pluginInits = new Map<string, BackendRegisterInit>();\n    const moduleInits = new Map<string, Map<string, BackendRegisterInit>>();\n\n    // Enumerate all registrations\n    for (const feature of this.#registrations) {\n      for (const r of feature.getRegistrations()) {\n        const provides = new Set<ExtensionPoint<unknown>>();\n\n        if (r.type === 'plugin' || r.type === 'module') {\n          for (const [extRef, extImpl] of r.extensionPoints) {\n            if (this.#extensionPoints.has(extRef.id)) {\n              throw new Error(\n                `ExtensionPoint with ID '${extRef.id}' is already registered`,\n              );\n            }\n            this.#extensionPoints.set(extRef.id, {\n              impl: extImpl,\n              pluginId: r.pluginId,\n            });\n            provides.add(extRef);\n          }\n        }\n\n        if (r.type === 'plugin') {\n          if (pluginInits.has(r.pluginId)) {\n            throw new Error(`Plugin '${r.pluginId}' is already registered`);\n          }\n          pluginInits.set(r.pluginId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else if (r.type === 'module') {\n          let modules = moduleInits.get(r.pluginId);\n          if (!modules) {\n            modules = new Map();\n            moduleInits.set(r.pluginId, modules);\n          }\n          if (modules.has(r.moduleId)) {\n            throw new Error(\n              `Module '${r.moduleId}' for plugin '${r.pluginId}' is already registered`,\n            );\n          }\n          modules.set(r.moduleId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else {\n          throw new Error(`Invalid registration type '${(r as any).type}'`);\n        }\n      }\n    }\n\n    const allPluginIds = [...pluginInits.keys()];\n\n    const initLogger = createInitializationLogger(\n      allPluginIds,\n      await this.#serviceRegistry.get(coreServices.rootLogger, 'root'),\n    );\n\n    // All plugins are initialized in parallel\n    await Promise.all(\n      allPluginIds.map(async pluginId => {\n        // Initialize all eager services\n        await this.#serviceRegistry.initializeEagerServicesWithScope(\n          'plugin',\n          pluginId,\n        );\n\n        // Modules are initialized before plugins, so that they can provide extension to the plugin\n        const modules = moduleInits.get(pluginId);\n        if (modules) {\n          const tree = DependencyGraph.fromIterable(\n            Array.from(modules).map(([moduleId, moduleInit]) => ({\n              value: { moduleId, moduleInit },\n              // Relationships are reversed at this point since we're only interested in the extension points.\n              // If a modules provides extension point A we want it to be initialized AFTER all modules\n              // that depend on extension point A, so that they can provide their extensions.\n              consumes: Array.from(moduleInit.provides).map(p => p.id),\n              provides: Array.from(moduleInit.consumes).map(c => c.id),\n            })),\n          );\n          const circular = tree.detectCircularDependency();\n          if (circular) {\n            throw new ConflictError(\n              `Circular dependency detected for modules of plugin '${pluginId}', ${circular\n                .map(({ moduleId }) => `'${moduleId}'`)\n                .join(' -> ')}`,\n            );\n          }\n          await tree.parallelTopologicalTraversal(\n            async ({ moduleId, moduleInit }) => {\n              const moduleDeps = await this.#getInitDeps(\n                moduleInit.init.deps,\n                pluginId,\n                moduleId,\n              );\n              await moduleInit.init.func(moduleDeps).catch(error => {\n                throw new ForwardedError(\n                  `Module '${moduleId}' for plugin '${pluginId}' startup failed`,\n                  error,\n                );\n              });\n            },\n          );\n        }\n\n        // Once all modules have been initialized, we can initialize the plugin itself\n        const pluginInit = pluginInits.get(pluginId);\n        // We allow modules to be installed without the accompanying plugin, so the plugin may not exist\n        if (pluginInit) {\n          const pluginDeps = await this.#getInitDeps(\n            pluginInit.init.deps,\n            pluginId,\n          );\n          await pluginInit.init.func(pluginDeps).catch(error => {\n            throw new ForwardedError(\n              `Plugin '${pluginId}' startup failed`,\n              error,\n            );\n          });\n        }\n\n        initLogger.onPluginStarted(pluginId);\n\n        // Once the plugin and all modules have been initialized, we can signal that the plugin has stared up successfully\n        const lifecycleService = await this.#getPluginLifecycleImpl(pluginId);\n        await lifecycleService.startup();\n      }),\n    );\n\n    // Once all plugins and modules have been initialized, we can signal that the backend has started up successfully\n    const lifecycleService = await this.#getRootLifecycleImpl();\n    await lifecycleService.startup();\n\n    initLogger.onAllStarted();\n\n    // Once the backend is started, any uncaught errors or unhandled rejections are caught\n    // and logged, in order to avoid crashing the entire backend on local failures.\n    if (process.env.NODE_ENV !== 'test') {\n      const rootLogger = await this.#serviceRegistry.get(\n        coreServices.rootLogger,\n        'root',\n      );\n      process.on('unhandledRejection', (reason: Error) => {\n        rootLogger\n          ?.child({ type: 'unhandledRejection' })\n          ?.error('Unhandled rejection', reason);\n      });\n      process.on('uncaughtException', error => {\n        rootLogger\n          ?.child({ type: 'uncaughtException' })\n          ?.error('Uncaught exception', error);\n      });\n    }\n  }\n\n  // It's fine to call .stop() multiple times, which for example can happen with manual stop + process exit\n  async stop(): Promise<void> {\n    instanceRegistry.unregister(this);\n\n    if (!this.#stopPromise) {\n      this.#stopPromise = this.#doStop();\n    }\n    await this.#stopPromise;\n  }\n\n  async #doStop(): Promise<void> {\n    if (!this.#startPromise) {\n      return;\n    }\n\n    try {\n      await this.#startPromise;\n    } catch (error) {\n      // The startup failed, but we may still want to do cleanup so we continue silently\n    }\n\n    const lifecycleService = await this.#getRootLifecycleImpl();\n    await lifecycleService.shutdown();\n  }\n\n  // Bit of a hacky way to grab the lifecycle services, potentially find a nicer way to do this\n  async #getRootLifecycleImpl(): Promise<\n    RootLifecycleService & {\n      startup(): Promise<void>;\n      shutdown(): Promise<void>;\n    }\n  > {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.rootLifecycle,\n      'root',\n    );\n\n    const service = lifecycleService as any;\n    if (\n      service &&\n      typeof service.startup === 'function' &&\n      typeof service.shutdown === 'function'\n    ) {\n      return service;\n    }\n\n    throw new Error('Unexpected root lifecycle service implementation');\n  }\n\n  async #getPluginLifecycleImpl(\n    pluginId: string,\n  ): Promise<LifecycleService & { startup(): Promise<void> }> {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.lifecycle,\n      pluginId,\n    );\n\n    const service = lifecycleService as any;\n    if (service && typeof service.startup === 'function') {\n      return service;\n    }\n\n    throw new Error('Unexpected plugin lifecycle service implementation');\n  }\n\n  async #applyBackendFeatureLoaders(loaders: InternalBackendFeatureLoader[]) {\n    for (const loader of loaders) {\n      const deps = new Map<string, unknown>();\n      const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n      for (const [name, ref] of Object.entries(loader.deps ?? {})) {\n        if (ref.scope !== 'root') {\n          throw new Error(\n            `Feature loaders can only depend on root scoped services, but '${name}' is scoped to '${ref.scope}'. Offending loader is ${loader.description}`,\n          );\n        }\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          'root',\n        );\n        if (impl) {\n          deps.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n\n      if (missingRefs.size > 0) {\n        const missing = Array.from(missingRefs).join(', ');\n        throw new Error(\n          `No service available for the following ref(s): ${missing}, depended on by feature loader ${loader.description}`,\n        );\n      }\n\n      const result = await loader\n        .loader(Object.fromEntries(deps))\n        .then(features => features.map(unwrapFeature))\n        .catch(error => {\n          throw new ForwardedError(\n            `Feature loader ${loader.description} failed`,\n            error,\n          );\n        });\n\n      let didAddServiceFactory = false;\n      const newLoaders = new Array<InternalBackendFeatureLoader>();\n\n      for await (const feature of result) {\n        if (isBackendFeatureLoader(feature)) {\n          newLoaders.push(feature);\n        } else {\n          didAddServiceFactory ||= isServiceFactory(feature);\n          this.#addFeature(feature);\n        }\n      }\n\n      // Every time we add a new service factory we need to make sure that we don't have circular dependencies\n      if (didAddServiceFactory) {\n        this.#serviceRegistry.checkForCircularDeps();\n      }\n\n      // Apply loaders recursively, depth-first\n      if (newLoaders.length > 0) {\n        await this.#applyBackendFeatureLoaders(newLoaders);\n      }\n    }\n  }\n}\n\nfunction toInternalBackendFeature(\n  feature: BackendFeature,\n): InternalBackendFeature {\n  if (feature.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid BackendFeature, bad type '${feature.$$type}'`);\n  }\n  const internal = feature as InternalBackendFeature;\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid BackendFeature, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n\nfunction isServiceFactory(\n  feature: BackendFeature,\n): feature is InternalServiceFactory {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'service') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'service' in internal;\n}\n\nfunction isBackendRegistrations(\n  feature: BackendFeature,\n): feature is InternalBackendRegistrations {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'registrations') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'getRegistrations' in internal;\n}\n\nfunction isBackendFeatureLoader(\n  feature: BackendFeature,\n): feature is InternalBackendFeatureLoader {\n  return toInternalBackendFeature(feature).featureType === 'loader';\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackendFeature, ServiceFactory } from '@backstage/backend-plugin-api';\nimport { BackendInitializer } from './BackendInitializer';\nimport { unwrapFeature } from './helpers';\nimport { Backend } from './types';\n\nexport class BackstageBackend implements Backend {\n  #initializer: BackendInitializer;\n\n  constructor(defaultServiceFactories: ServiceFactory[]) {\n    this.#initializer = new BackendInitializer(defaultServiceFactories);\n  }\n\n  add(feature: BackendFeature | Promise<{ default: BackendFeature }>): void {\n    if (isPromise(feature)) {\n      this.#initializer.add(feature.then(f => unwrapFeature(f.default)));\n    } else {\n      this.#initializer.add(unwrapFeature(feature));\n    }\n  }\n\n  async start(): Promise<void> {\n    await this.#initializer.start();\n  }\n\n  async stop(): Promise<void> {\n    await this.#initializer.stop();\n  }\n}\n\nfunction isPromise<T>(value: unknown | Promise<T>): value is Promise<T> {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { coreServices } from '@backstage/backend-plugin-api';\nimport { BackstageBackend } from './BackstageBackend';\nimport { Backend, CreateSpecializedBackendOptions } from './types';\n\n/**\n * @public\n */\nexport function createSpecializedBackend(\n  options: CreateSpecializedBackendOptions,\n): Backend {\n  const exists = new Set<string>();\n  const duplicates = new Set<string>();\n  for (const { service } of options.defaultServiceFactories) {\n    if (exists.has(service.id)) {\n      duplicates.add(service.id);\n    } else {\n      exists.add(service.id);\n    }\n  }\n  if (duplicates.size > 0) {\n    const ids = Array.from(duplicates).join(', ');\n    throw new Error(`Duplicate service implementations provided for ${ids}`);\n  }\n  if (exists.has(coreServices.pluginMetadata.id)) {\n    throw new Error(\n      `The ${coreServices.pluginMetadata.id} service cannot be overridden`,\n    );\n  }\n\n  return new BackstageBackend(options.defaultServiceFactories);\n}\n"],"names":["createServiceFactory","coreServices","stringifyError","ConflictError","featureDiscoveryServiceRef","ForwardedError","lifecycleService"],"mappings":"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"}