/// <reference types="node" />
import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LoggerService, RootConfigService, RootLoggerService, BackendFeature, ServiceFactory, DiscoveryService, LifecycleService, RootLifecycleService, RootHttpRouterService } from '@backstage/backend-plugin-api';
import { Config, AppConfig } from '@backstage/config';
import { ConfigSchema, LoadConfigOptionsRemote, RemoteConfigSourceOptions } from '@backstage/config-loader';
import { RequestHandler, ErrorRequestHandler, Express, Handler } from 'express';
import * as http from 'http';
import { RequestListener } from 'http';
import { CorsOptions } from 'cors';
import { HelmetOptions } from 'helmet';
import { JsonObject, HumanDuration } from '@backstage/types';
import { Format } from 'logform';
import { transport } from 'winston';
import { Server } from 'node:http';

/** @public */
declare function createConfigSecretEnumerator$1(options: {
    logger: LoggerService;
    dir?: string;
    schema?: ConfigSchema;
}): Promise<(config: Config) => Iterable<string>>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootConfig` instead.
 */
declare const createConfigSecretEnumerator: typeof createConfigSecretEnumerator$1;
/**
 * Load configuration for a Backend.
 *
 * This function should only be called once, during the initialization of the backend.
 *
 * @public
 * @deprecated Please migrate to the new backend system and use `coreServices.rootConfig` instead, or the {@link @backstage/config-loader#ConfigSources} facilities if required.
 */
declare function loadBackendConfig(options: {
    remote?: LoadConfigOptionsRemote;
    argv: string[];
    additionalConfigs?: AppConfig[];
    watch?: boolean;
}): Promise<{
    config: Config;
}>;

/**
 * An HTTP server extended with utility methods.
 *
 * @public
 */
interface ExtendedHttpServer$1 extends http.Server {
    start(): Promise<void>;
    stop(): Promise<void>;
    port(): number;
}
/**
 * Options for starting up an HTTP server.
 *
 * @public
 */
type HttpServerOptions$1 = {
    listen: {
        port: number;
        host: string;
    };
    https?: {
        certificate: HttpServerCertificateOptions$1;
    };
};
/**
 * Options for configuring HTTPS for an HTTP server.
 *
 * @public
 */
type HttpServerCertificateOptions$1 = {
    type: 'pem';
    key: string;
    cert: string;
} | {
    type: 'generated';
    hostname: string;
};

/**
 * Reads {@link HttpServerOptions} from a {@link @backstage/config#Config} object.
 *
 * @public
 * @remarks
 *
 * The provided configuration object should contain the `listen` and
 * additional keys directly.
 *
 * @example
 * ```ts
 * const opts = readHttpServerOptions(config.getConfig('backend'));
 * ```
 */
declare function readHttpServerOptions$1(config?: Config): HttpServerOptions$1;

/**
 * Creates a Node.js HTTP or HTTPS server instance.
 *
 * @public
 */
declare function createHttpServer$1(listener: RequestListener, options: HttpServerOptions$1, deps: {
    logger: LoggerService;
}): Promise<ExtendedHttpServer$1>;

/**
 * Options used to create a {@link MiddlewareFactory}.
 *
 * @public
 */
interface MiddlewareFactoryOptions$1 {
    config: RootConfigService;
    logger: LoggerService;
}
/**
 * Options passed to the {@link MiddlewareFactory.error} middleware.
 *
 * @public
 */
interface MiddlewareFactoryErrorOptions$1 {
    /**
     * Whether error response bodies should show error stack traces or not.
     *
     * If not specified, by default shows stack traces only in development mode.
     */
    showStackTraces?: boolean;
    /**
     * Whether any 4xx errors should be logged or not.
     *
     * If not specified, default to only logging 5xx errors.
     */
    logAllErrors?: boolean;
}
/**
 * A utility to configure common middleware.
 *
 * @public
 */
declare class MiddlewareFactory$1 {
    #private;
    /**
     * Creates a new {@link MiddlewareFactory}.
     */
    static create(options: MiddlewareFactoryOptions$1): MiddlewareFactory$1;
    private constructor();
    /**
     * Returns a middleware that unconditionally produces a 404 error response.
     *
     * @remarks
     *
     * Typically you want to place this middleware at the end of the chain, such
     * that it's the last one attempted after no other routes matched.
     *
     * @returns An Express request handler
     */
    notFound(): RequestHandler;
    /**
     * Returns the compression middleware.
     *
     * @remarks
     *
     * The middleware will attempt to compress response bodies for all requests
     * that traverse through the middleware.
     */
    compression(): RequestHandler;
    /**
     * Returns a request logging middleware.
     *
     * @remarks
     *
     * Typically you want to place this middleware at the start of the chain, such
     * that it always logs requests whether they are "caught" by handlers farther
     * down or not.
     *
     * @returns An Express request handler
     */
    logging(): RequestHandler;
    /**
     * Returns a middleware that implements the helmet library.
     *
     * @remarks
     *
     * This middleware applies security policies to incoming requests and outgoing
     * responses. It is configured using config keys such as `backend.csp`.
     *
     * @see {@link https://helmetjs.github.io/}
     *
     * @returns An Express request handler
     */
    helmet(): RequestHandler;
    /**
     * Returns a middleware that implements the cors library.
     *
     * @remarks
     *
     * This middleware handles CORS. It is configured using the config key
     * `backend.cors`.
     *
     * @see {@link https://github.com/expressjs/cors}
     *
     * @returns An Express request handler
     */
    cors(): RequestHandler;
    /**
     * Express middleware to handle errors during request processing.
     *
     * @remarks
     *
     * This is commonly the very last middleware in the chain.
     *
     * Its primary purpose is not to do translation of business logic exceptions,
     * but rather to be a global catch-all for uncaught "fatal" errors that are
     * expected to result in a 500 error. However, it also does handle some common
     * error types (such as http-error exceptions, and the well-known error types
     * in the `@backstage/errors` package) and returns the enclosed status code
     * accordingly.
     *
     * It will also produce a response body with a serialized form of the error,
     * unless a previous handler already did send a body. See
     * {@link @backstage/errors#ErrorResponseBody} for the response shape used.
     *
     * @returns An Express error request handler
     */
    error(options?: MiddlewareFactoryErrorOptions$1): ErrorRequestHandler;
}

/**
 * Attempts to read a CORS options object from the backend configuration object.
 *
 * @public
 * @param config - The backend configuration object.
 * @returns A CORS options object, or undefined if no cors configuration is present.
 *
 * @example
 * ```ts
 * const corsOptions = readCorsOptions(config.getConfig('backend'));
 * ```
 */
declare function readCorsOptions$1(config?: Config): CorsOptions;

/**
 * Attempts to read Helmet options from the backend configuration object.
 *
 * @public
 * @param config - The backend configuration object.
 * @returns A Helmet options object, or undefined if no Helmet configuration is present.
 *
 * @example
 * ```ts
 * const helmetOptions = readHelmetOptions(config.getConfig('backend'));
 * ```
 */
declare function readHelmetOptions$1(config?: Config): HelmetOptions;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare const readHttpServerOptions: typeof readHttpServerOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare const createHttpServer: typeof createHttpServer$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare const readCorsOptions: typeof readCorsOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare const readHelmetOptions: typeof readHelmetOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare class MiddlewareFactory {
    private readonly impl;
    /**
     * Creates a new {@link MiddlewareFactory}.
     */
    static create(options: MiddlewareFactoryOptions): MiddlewareFactory;
    private constructor();
    /**
     * Returns a middleware that unconditionally produces a 404 error response.
     *
     * @remarks
     *
     * Typically you want to place this middleware at the end of the chain, such
     * that it's the last one attempted after no other routes matched.
     *
     * @returns An Express request handler
     */
    notFound(): RequestHandler;
    /**
     * Returns the compression middleware.
     *
     * @remarks
     *
     * The middleware will attempt to compress response bodies for all requests
     * that traverse through the middleware.
     */
    compression(): RequestHandler;
    /**
     * Returns a request logging middleware.
     *
     * @remarks
     *
     * Typically you want to place this middleware at the start of the chain, such
     * that it always logs requests whether they are "caught" by handlers farther
     * down or not.
     *
     * @returns An Express request handler
     */
    logging(): RequestHandler;
    /**
     * Returns a middleware that implements the helmet library.
     *
     * @remarks
     *
     * This middleware applies security policies to incoming requests and outgoing
     * responses. It is configured using config keys such as `backend.csp`.
     *
     * @see {@link https://helmetjs.github.io/}
     *
     * @returns An Express request handler
     */
    helmet(): RequestHandler;
    /**
     * Returns a middleware that implements the cors library.
     *
     * @remarks
     *
     * This middleware handles CORS. It is configured using the config key
     * `backend.cors`.
     *
     * @see {@link https://github.com/expressjs/cors}
     *
     * @returns An Express request handler
     */
    cors(): RequestHandler;
    /**
     * Express middleware to handle errors during request processing.
     *
     * @remarks
     *
     * This is commonly the very last middleware in the chain.
     *
     * Its primary purpose is not to do translation of business logic exceptions,
     * but rather to be a global catch-all for uncaught "fatal" errors that are
     * expected to result in a 500 error. However, it also does handle some common
     * error types (such as http-error exceptions, and the well-known error types
     * in the `@backstage/errors` package) and returns the enclosed status code
     * accordingly.
     *
     * It will also produce a response body with a serialized form of the error,
     * unless a previous handler already did send a body. See
     * {@link @backstage/errors#ErrorResponseBody} for the response shape used.
     *
     * @returns An Express error request handler
     */
    error(options?: MiddlewareFactoryErrorOptions): ErrorRequestHandler;
}
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type MiddlewareFactoryErrorOptions = MiddlewareFactoryErrorOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type MiddlewareFactoryOptions = MiddlewareFactoryOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type ExtendedHttpServer = ExtendedHttpServer$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type HttpServerCertificateOptions = HttpServerCertificateOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type HttpServerOptions = HttpServerOptions$1;

/**
 * @public
 */
interface WinstonLoggerOptions$1 {
    meta?: JsonObject;
    level?: string;
    format?: Format;
    transports?: transport[];
}

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootLogger` instead.
 */
type WinstonLoggerOptions = WinstonLoggerOptions$1;
/**
 * A {@link @backstage/backend-plugin-api#LoggerService} implementation based on winston.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootLogger` instead.
 */
declare class WinstonLogger implements RootLoggerService {
    private readonly impl;
    /**
     * Creates a {@link WinstonLogger} instance.
     */
    static create(options: WinstonLoggerOptions): WinstonLogger;
    /**
     * Creates a winston log formatter for redacting secrets.
     */
    static redacter(): {
        format: Format;
        add: (redactions: Iterable<string>) => void;
    };
    /**
     * Creates a pretty printed winston log formatter.
     */
    static colorFormat(): Format;
    private constructor();
    error(message: string, meta?: JsonObject): void;
    warn(message: string, meta?: JsonObject): void;
    info(message: string, meta?: JsonObject): void;
    debug(message: string, meta?: JsonObject): void;
    child(meta: JsonObject): LoggerService;
    addRedactions(redactions: Iterable<string>): void;
}

/**
 * @public
 */
interface Backend {
    add(feature: BackendFeature | Promise<{
        default: BackendFeature;
    }>): void;
    /**
     * @deprecated The ability to add features defined as a callback is being
     * removed. Please update the installed feature to no longer be defined as a
     * callback, typically this means updating it to use the latest version of
     * `@backstage/backend-plugin-api`. If the feature is from a third-party
     * package, please reach out to the package maintainer to update it.
     */
    add(feature: (() => BackendFeature) | Promise<{
        default: () => BackendFeature;
    }>): void;
    start(): Promise<void>;
    stop(): Promise<void>;
}
/**
 * @public
 */
interface CreateSpecializedBackendOptions {
    defaultServiceFactories: ServiceFactory[];
}

/**
 * @public
 */
declare function createSpecializedBackend(options: CreateSpecializedBackendOptions): Backend;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/cache` instead.
 */
declare const cacheServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.CacheService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootConfig` instead.
 */
interface RootConfigFactoryOptions {
    /**
     * Process arguments to use instead of the default `process.argv()`.
     */
    argv?: string[];
    /**
     * Enables and sets options for remote configuration loading.
     */
    remote?: Pick<RemoteConfigSourceOptions, 'reloadInterval'>;
    watch?: boolean;
}
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootConfig` instead.
 */
declare const rootConfigServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.RootConfigService, "root", RootConfigFactoryOptions>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/database` instead.
 */
declare const databaseServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.DatabaseService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/discovery` instead.
 */
declare const discoveryServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.DiscoveryService, "plugin", undefined>;

/**
 * HostDiscovery is a basic PluginEndpointDiscovery implementation
 * that can handle plugins that are hosted in a single or multiple deployments.
 *
 * The deployment may be scaled horizontally, as long as the external URL
 * is the same for all instances. However, internal URLs will always be
 * resolved to the same host, so there won't be any balancing of internal traffic.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/discovery` instead.
 */
declare class HostDiscovery implements DiscoveryService {
    private readonly impl;
    /**
     * Creates a new HostDiscovery discovery instance by reading
     * from the `backend` config section, specifically the `.baseUrl` for
     * discovering the external URL, and the `.listen` and `.https` config
     * for the internal one.
     *
     * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.
     * eg.
     * ```yaml
     * discovery:
     *  endpoints:
     *    - target: https://internal.example.com/internal-catalog
     *      plugins: [catalog]
     *    - target: https://internal.example.com/secure/api/{{pluginId}}
     *      plugins: [auth, permission]
     *    - target:
     *        internal: https://internal.example.com/search
     *        external: https://example.com/search
     *      plugins: [search]
     * ```
     *
     * The basePath defaults to `/api`, meaning the default full internal
     * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.
     */
    static fromConfig(config: Config, options?: {
        basePath?: string;
    }): HostDiscovery;
    private constructor();
    getBaseUrl(pluginId: string): Promise<string>;
    getExternalBaseUrl(pluginId: string): Promise<string>;
}

/**
 * An identity client options object which allows extra configurations
 *
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
type IdentityFactoryOptions = {
    issuer?: string;
    /**
     * JWS "alg" (Algorithm) Header Parameter values. Defaults to an array containing just ES256.
     * More info on supported algorithms: https://github.com/panva/jose
     */
    algorithms?: string[];
};
/**
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
declare const identityServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.IdentityService, "plugin", IdentityFactoryOptions>;

/**
 * Allows plugins to register shutdown hooks that are run when the process is about to exit.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/lifecycle` instead.
 */
declare const lifecycleServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<LifecycleService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/permissions` instead.
 */
declare const permissionsServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.PermissionsService, "plugin", undefined>;

/**
 * Allows plugins to register shutdown hooks that are run when the process is about to exit.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootLifecycle` instead.
 */
declare const rootLifecycleServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<RootLifecycleService, "root", undefined>;

/**
 * @public
 * @deprecated Please migrate to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead
 */
declare const tokenManagerServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.TokenManagerService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/urlReader` instead.
 */
declare const urlReaderServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.UrlReaderService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/auth` instead.
 */
declare const authServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.AuthService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/httpAuth` instead.
 */
declare const httpAuthServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.HttpAuthService, "plugin", undefined>;

/**
 * HTTP route registration for plugins.
 *
 * See {@link @backstage/code-plugin-api#HttpRouterService}
 * and {@link https://backstage.io/docs/backend-system/core-services/http-router | the service docs}
 * for more information.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/httpRouter` instead.
 */
declare const httpRouterServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.HttpRouterService, "plugin", undefined>;

/**
 * Options for {@link createLifecycleMiddleware}.
 * @public
 */
interface LifecycleMiddlewareOptions$1 {
    lifecycle: LifecycleService;
    /**
     * The maximum time that paused requests will wait for the service to start, before returning an error.
     *
     * Defaults to 5 seconds.
     */
    startupRequestPauseTimeout?: HumanDuration;
}
/**
 * Creates a middleware that pauses requests until the service has started.
 *
 * @remarks
 *
 * Requests that arrive before the service has started will be paused until startup is complete.
 * If the service does not start within the provided timeout, the request will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * If the service is shutting down, all requests will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * @public
 */
declare function createLifecycleMiddleware$1(options: LifecycleMiddlewareOptions$1): RequestHandler;

/**
 * Options for {@link createLifecycleMiddleware}.
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/httpRouter` instead.
 */
type LifecycleMiddlewareOptions = LifecycleMiddlewareOptions$1;
/**
 * Creates a middleware that pauses requests until the service has started.
 *
 * @remarks
 *
 * Requests that arrive before the service has started will be paused until startup is complete.
 * If the service does not start within the provided timeout, the request will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * If the service is shutting down, all requests will be rejected with a
 * {@link @backstage/errors#ServiceUnavailableError}.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/httpRouter` instead.
 */
declare const createLifecycleMiddleware: typeof createLifecycleMiddleware$1;

/**
 * Plugin-level logging.
 *
 * See {@link @backstage/code-plugin-api#LoggerService}
 * and {@link https://backstage.io/docs/backend-system/core-services/logger | the service docs}
 * for more information.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/logger` instead.
 */
declare const loggerServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.LoggerService, "plugin", undefined>;

/**
 * @public
 */
interface RootHttpRouterConfigureContext$1 {
    app: Express;
    server: Server;
    middleware: MiddlewareFactory$1;
    routes: RequestHandler;
    config: RootConfigService;
    logger: LoggerService;
    lifecycle: LifecycleService;
    healthRouter: RequestHandler;
    applyDefaults: () => void;
}
/**
 * HTTP route registration for root services.
 *
 * See {@link @backstage/code-plugin-api#RootHttpRouterService}
 * and {@link https://backstage.io/docs/backend-system/core-services/root-http-router | the service docs}
 * for more information.
 *
 * @public
 */
type RootHttpRouterFactoryOptions$1 = {
    /**
     * The path to forward all unmatched requests to. Defaults to '/api/app' if
     * not given. Disables index path behavior if false is given.
     */
    indexPath?: string | false;
    configure?(context: RootHttpRouterConfigureContext$1): void;
};

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type RootHttpRouterConfigureContext = RootHttpRouterConfigureContext$1;
/**
 * HTTP route registration for root services.
 *
 * See {@link @backstage/code-plugin-api#RootHttpRouterService}
 * and {@link https://backstage.io/docs/backend-system/core-services/root-http-router | the service docs}
 * for more information.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type RootHttpRouterFactoryOptions = RootHttpRouterFactoryOptions$1;
/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare const rootHttpRouterServiceFactory: ((options?: RootHttpRouterFactoryOptions$1 | undefined) => _backstage_backend_plugin_api.ServiceFactory<_backstage_backend_plugin_api.RootHttpRouterService, "root">) & _backstage_backend_plugin_api.ServiceFactory<_backstage_backend_plugin_api.RootHttpRouterService, "root">;

/**
 * Options for the {@link DefaultRootHttpRouter} class.
 *
 * @public
 */
interface DefaultRootHttpRouterOptions$1 {
    /**
     * The path to forward all unmatched requests to. Defaults to '/api/app' if
     * not given. Disables index path behavior if false is given.
     */
    indexPath?: string | false;
}

/**
 * Options for the {@link DefaultRootHttpRouter} class.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
type DefaultRootHttpRouterOptions = DefaultRootHttpRouterOptions$1;
/**
 * The default implementation of the {@link @backstage/backend-plugin-api#RootHttpRouterService} interface for
 * {@link @backstage/backend-plugin-api#coreServices.rootHttpRouter}.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootHttpRouter` instead.
 */
declare class DefaultRootHttpRouter implements RootHttpRouterService {
    private readonly impl;
    static create(options?: DefaultRootHttpRouterOptions): DefaultRootHttpRouter;
    private constructor();
    use(path: string, handler: Handler): void;
    handler(): Handler;
}

/**
 * Root-level logging.
 *
 * See {@link @backstage/code-plugin-api#RootLoggerService}
 * and {@link https://backstage.io/docs/backend-system/core-services/root-logger | the service docs}
 * for more information.
 *
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/rootLogger` instead.
 */
declare const rootLoggerServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.RootLoggerService, "root", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/scheduler` instead.
 */
declare const schedulerServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.SchedulerService, "plugin", undefined>;

/**
 * @public
 * @deprecated Please import from `@backstage/backend-defaults/userInfo` instead.
 */
declare const userInfoServiceFactory: _backstage_backend_plugin_api.ServiceFactoryCompat<_backstage_backend_plugin_api.UserInfoService, "plugin", undefined>;

export { type Backend, type CreateSpecializedBackendOptions, DefaultRootHttpRouter, type DefaultRootHttpRouterOptions, type ExtendedHttpServer, HostDiscovery, type HttpServerCertificateOptions, type HttpServerOptions, type IdentityFactoryOptions, type LifecycleMiddlewareOptions, MiddlewareFactory, type MiddlewareFactoryErrorOptions, type MiddlewareFactoryOptions, type RootConfigFactoryOptions, type RootHttpRouterConfigureContext, type RootHttpRouterFactoryOptions, WinstonLogger, type WinstonLoggerOptions, authServiceFactory, cacheServiceFactory, createConfigSecretEnumerator, createHttpServer, createLifecycleMiddleware, createSpecializedBackend, databaseServiceFactory, discoveryServiceFactory, httpAuthServiceFactory, httpRouterServiceFactory, identityServiceFactory, lifecycleServiceFactory, loadBackendConfig, loggerServiceFactory, permissionsServiceFactory, readCorsOptions, readHelmetOptions, readHttpServerOptions, rootConfigServiceFactory, rootHttpRouterServiceFactory, rootLifecycleServiceFactory, rootLoggerServiceFactory, schedulerServiceFactory, tokenManagerServiceFactory, urlReaderServiceFactory, userInfoServiceFactory };
